{
  "name": "InsightBot AI v2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/insightbot-test/chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1696,
        -336
      ],
      "id": "4d13cdfa-cf58-45dc-a6ed-a71fc56469e7",
      "name": "Webhook",
      "webhookId": "0792d269-c91d-44d4-999c-ebfb4dd53f24"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    error: true,\n    message: $input.first().json.message || \"Error en Session Manager\",\n    user_message: \"Lo siento, hubo un problema t√©cnico. Por favor intenta de nuevo.\",\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2640,
        448
      ],
      "id": "60646e0c-38da-4d67-a9ec-72e539c5ddd4",
      "name": "Salida de Error"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"titulo_solicitud\": {\n      \"type\": \"string\",\n      \"description\": \"T√≠tulo claro y descriptivo de la solicitud generado por IA.\"\n    },\n    \"problema_principal\": {\n      \"type\": \"string\",\n      \"description\": \"Descripci√≥n espec√≠fica y sintetizada del problema tecnol√≥gico.\"\n    },\n    \"objetivo_esperado\": {\n      \"type\": \"string\",\n      \"description\": \"Resultado o beneficio que busca obtener el solicitante.\"\n    },\n    \"plataformas_involucradas\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" },\n      \"description\": \"Lista final de plataformas UTP involucradas.\"\n    },\n    \"beneficiarios\": {\n      \"type\": \"string\",\n      \"description\": \"Identificaci√≥n de qui√©nes se beneficiar√≠an de la soluci√≥n.\"\n    },\n    \"frecuencia_uso\": {\n      \"type\": \"string\",\n      \"description\": \"Frecuencia con la que se usar√≠a la soluci√≥n. Debe ser uno de: 'diario', 'semanal', 'mensual', 'esporadico'.\"\n    },\n    \"plazo_deseado\": {\n      \"type\": \"string\",\n      \"description\": \"El plazo deseado expresado por el usuario (ej: 'en menos de un mes', 'de 1 a 3 meses'). El agente debe normalizarlo a uno de los valores siguientes: menos_1_mes, 1_a_3_meses, 3_a_6_meses, sin_definir.\"\n    },\n    \"departamento_solicitante\": {\n      \"type\": \"string\",\n      \"description\": \"Departamento o √°rea del solicitante.\"\n    },\n    \"clasificacion_sugerida\": {\n      \"type\": \"string\",\n      \"description\": \"Clasificaci√≥n final sugerida por la IA. Debe ser 'proyecto' o 'requerimiento'.\"\n    },\n    \"prioridad_sugerida\": {\n      \"type\": \"string\",\n      \"description\": \"Prioridad final sugerida por la IA. Debe ser 'P1', 'P2', 'P3' o 'P4'.\"\n    },\n    \"score_estimado\": {\n      \"type\": \"number\",\n      \"description\": \"El score final calculado que se te proporcion√≥ como contexto.\"\n    },\n    \"resumen_ejecutivo\": {\n      \"type\": \"string\",\n      \"description\": \"P√°rrafo ejecutivo que resume el problema, la recomendaci√≥n y la justificaci√≥n para el l√≠der GTTD.\"\n    }\n  },\n  \"required\": [\n    \"titulo_solicitud\", \"problema_principal\", \"objetivo_esperado\", \"plataformas_involucradas\",\n    \"beneficiarios\", \"frecuencia_uso\", \"urgencia\", \"departamento_solicitante\",\n    \"clasificacion_sugerida\", \"prioridad_sugerida\", \"score_estimado\", \"resumen_ejecutivo\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3264,
        -240
      ],
      "id": "96859e24-4b42-49a5-94be-d10b3e0b5542",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, GET, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        3904,
        -480
      ],
      "id": "bc0fbc96-ed55-4214-8ad2-97494a1c2acf",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extraer el JSON del campo 'output' para enviarlo directamente al portal\nconst inputData = $input.first().json;\n\nconsole.log('üì• Input recibido:', JSON.stringify(inputData, null, 2));\n\n// Si viene dentro de 'output', extraerlo\nif (inputData.output && typeof inputData.output === 'object') {\n  console.log('‚úÖ Extrayendo contenido de output...');\n  return [{ json: inputData.output }];\n}\n\n// Si es un array con output, extraer el primer elemento\nif (Array.isArray(inputData) && inputData[0] && inputData[0].output) {\n  console.log('‚úÖ Extrayendo de array con output...');\n  return [{ json: inputData[0].output }];\n}\n\n// Si ya es el JSON directo, devolverlo tal como est√°\nconsole.log('‚úÖ JSON ya est√° en formato correcto');\nreturn [{ json: inputData }];"
      },
      "id": "d03dc777-eadc-495d-8b5e-8d72bd1f67fd",
      "name": "Extract JSON from Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2464,
        128
      ]
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "  {\n    \"output\": {\n      \"agent\": \"discovery_agent\",\n      \"message\": \"Lo siento, no pude obtener tu perfil de usuario debido a un error de autorizaci√≥n. Por favor, int√©ntalo de nuevo m√°s tarde o contacta a soporte.\",\n      \"status\": \"error\",\n      \"session\": {\n        \"session_id\": \"ea66cbb3-6626-4e72-a8fc-8b2bc77a7bf5\",\n        \"stage\": \"discovery\",\n        \"completeness\": 0,\n        \"next_agent\": \"discovery_agent\",\n        \"should_continue\": false,\n        \"confidence\": \"low\"\n      },\n      \"ui\": {\n        \"progress\": {\n          \"percentage\": 0,\n          \"color\": \"danger\",\n          \"status_message\": \"Comencemos a entender tu situaci√≥n paso a paso.\",\n          \"show_bar\": true\n        },\n        \"interaction\": {\n          \"next_questions\": [],\n          \"show_continue_button\": false,\n          \"show_restart_button\": true,\n          \"input_placeholder\": \"Cu√©ntame m√°s detalles...\"\n        }\n      },\n      \"extracted_data\": {\n        \"complete_info\": {},\n        \"information_gaps\": []\n      },\n      \"metadata\": {\n        \"timestamp\": \"2025-07-30T03:30:00.000Z\",\n        \"reasoning\": \"Error al obtener el perfil del usuario, no se puede continuar con el proceso de descubrimiento.\"\n      }\n    }\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2224,
        256
      ],
      "id": "52a14f70-75e9-412c-94e8-1993bbd39e1e",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "url": "https://portal-innovacion-gttd.vercel.app/api/user/profile",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $json.body.user.auth_token}}"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=300"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 3
            }
          },
          "timeout": 5000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -592,
        -64
      ],
      "id": "0a927cef-4020-4a59-b7a9-8febc3c59e74",
      "name": "User Profile Data"
    },
    {
      "parameters": {
        "jsCode": "// Combinar datos del webhook + perfil de usuario\nconst webhookData = $('Webhook').first().json;\nconst userProfile = $('User Profile Data').first().json;\n\n// Extraer datos importantes\nconst userMessage = webhookData.body.message;\nconst userContext = webhookData.body.context;\nconst userAuth = webhookData.body.user;\n\n// Crear objeto combinado optimizado\nconst combinedData = {\n  // Datos del usuario (ya obtenidos)\n  user_profile: {\n    user_id: userProfile.user_id,\n    name: userProfile.name,\n    department: userProfile.department,\n    role: userProfile.role,\n    email: userProfile.email,\n    area: userProfile.area\n  },\n  \n  // Datos del mensaje\n  user_query: userMessage,\n  user_context: userContext,\n  auth_token: userAuth.auth_token,\n  \n  // Timestamp para la sesi√≥n\n  timestamp: new Date().toISOString(),\n  \n  // Datos para queries SQL\n  sql_params: {\n    user_id: userProfile.user_id,\n    current_timestamp: new Date().toISOString()\n  }\n};\n\nreturn [{ json: combinedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        -64
      ],
      "id": "a3c72af1-af16-45d1-85f4-ac3fd1663b61",
      "name": "Combinar datos"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    session_id, \n    user_id, \n    current_stage, \n    conversation_data, \n    completeness_score, \n    status,\n    updated_at\nFROM session_states \n--WHERE user_id = '{{ $json.sql_params.user_id }}' \n  WHERE user_id = '{{ $('User Profile Data').item.json.user_id }}' AND status = 'active' \nORDER BY updated_at DESC \nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        96,
        -64
      ],
      "id": "b43f7cd8-ddb9-4e7a-b520-e50ca93c4a1c",
      "name": "Verificar Sesiones",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "8f2cc774-c251-499f-8ca2-5c4344fd6485",
              "leftValue": "={{ $json}}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        304,
        -80
      ],
      "id": "c16738c4-9d0d-417c-a865-6464aa61402f",
      "name": "¬øHay sesi√≥n activa?"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO session_states (\n    user_id, \n    current_stage, \n    conversation_data, \n    completeness_score, \n    status,\n    created_at,\n    updated_at\n) VALUES (\n    '{{ $('Combinar datos').first().json.sql_params.user_id }}', \n    'start', \n    '{}'::jsonb, \n    0, \n    'active',\n    NOW(),\n    NOW()\n) \nRETURNING \n    session_id, \n    user_id, \n    current_stage, \n    conversation_data, \n    completeness_score, \n    status;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        592,
        48
      ],
      "id": "c14e84bc-13c7-4119-a42a-39de9e5aa7a8",
      "name": "Crear sesi√≥n",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * C√≥digo listo para pegar en un nodo Code de n8n llamado\n * \"Combinar datos de sesi√≥n\" (JavaScript).\n *\n * Integra:\n * - Lectura de \"Combinar datos\" (perfil + message)\n * - Detecci√≥n de sesi√≥n existente y, si no, uso de \"Crear sesi√≥n\"\n * - Extracci√≥n y RESUMEN del historial (compacto y etiquetado)\n * - Construcci√≥n de classifierInput con history_summary (no env√≠a historial crudo)\n *\n * Requisitos previos en el workflow:\n * - Nodo \"Combinar datos\" que produce:\n *    { user_profile: { user_id, name, department, role, ... }, user_query, user_context, ... }\n * - Nodo Postgres \"Verificar Sesiones\": entrega fila con session_id,... si existe\n * - Nodo Postgres \"Extraer historial de conversaciones\": SELECT role,message,agent_name,created_at ORDER BY created_at ASC\n * - Nodo Postgres \"Crear sesi√≥n\": en caso no exista (opcional seg√∫n tu flujo)\n */\n\nconst combinedData = $('Combinar datos').first().json;\nlet sessionData = null;\nlet isExistingSession = false;\n\n// Internos para logs y DB (no enviar al LLM la lista cruda)\nlet conversationHistory = [];\nlet historyText = ''; // aqu√≠ quedar√° el resumen compacto para Prompt/Clasificador\n\nconsole.log('=== INICIANDO PROCESAMIENTO DE SESI√ìN ===');\n\n// PASO 1: Intentar obtener sesi√≥n existente PRIMERO\ntry {\n  const existingSessionNode = $('Verificar Sesiones');\n  if (existingSessionNode && existingSessionNode.first) {\n    const existingData = existingSessionNode.first().json;\n\n    if (existingData && existingData.session_id) {\n      sessionData = existingData;\n      isExistingSession = true;\n\n      console.log('‚úÖ Sesi√≥n existente encontrada:');\n      console.log('   - Session ID:', sessionData.session_id);\n      console.log('   - Datos completos:', JSON.stringify(sessionData, null, 2));\n\n      // PASO 1.1: Extraer historial SOLO para sesi√≥n existente y COMPRIMIRLO\n      try {\n        const historyNode = $('Extraer historial de conversaciones');\n        if (historyNode && historyNode.all) {\n          const historyData = historyNode.all();\n\n          if (Array.isArray(historyData) && historyData.length > 0) {\n            // Aplana a array de {role, message, agent_name, created_at}\n            conversationHistory = historyData.flatMap(item => item.json || []);\n\n            // Orden cronol√≥gico ascendente si el SQL no lo garantizara\n            conversationHistory.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n\n            // Toma √∫ltimos N mensajes (ajusta N seg√∫n tu costo de tokens)\n            const last = conversationHistory.slice(-10);\n\n            // Limpieza por l√≠nea\n            const clean = (s) => String(s ?? '')\n              .replace(/\\s+/g, ' ')\n              .trim()\n              .slice(0, 240);\n\n            // Etiqueta: assistant usa agent_name si existe\n            const lines = last.map(m => {\n              const who = m.role === 'assistant'\n                ? (m.agent_name || 'assistant')\n                : (m.role || 'user');\n              return `${who}: ${clean(m.message)}`;\n            });\n\n            // Ensamblar resumen (usa '\\n' o ' | ')\n            const summary = lines.join('\\n');\n            historyText = `\\nResumen historial:\\n${summary}`;\n\n            console.log(`‚úÖ Historial resumido: ${conversationHistory.length} mensajes (√∫ltimos ${last.length})`);\n          }\n        }\n      } catch (error) {\n        console.log('‚ÑπÔ∏è Error al procesar historial:', error.message);\n      }\n    } else {\n      console.log('‚ÑπÔ∏è Sesi√≥n existente est√° vac√≠a o sin session_id');\n    }\n  } else {\n    console.log('‚ÑπÔ∏è Nodo \"Verificar Sesiones\" no disponible');\n  }\n} catch (error) {\n  console.log('‚ÑπÔ∏è Error al acceder a sesi√≥n existente:', error.message);\n}\n\n// PASO 2: Si NO hay sesi√≥n existente, usar datos de creaci√≥n de sesi√≥n\nif (!sessionData) {\n  console.log('üîÑ No hay sesi√≥n existente, buscando nueva sesi√≥n...');\n  try {\n    const newSessionNode = $('Crear sesi√≥n');\n    if (newSessionNode && newSessionNode.first) {\n      const rawData = newSessionNode.first().json;\n      console.log('üîç DEBUG - Datos crudos de Crear sesi√≥n:');\n      console.log('   - Tipo:', typeof rawData);\n      console.log('   - Es array:', Array.isArray(rawData));\n      console.log('   - Contenido:', JSON.stringify(rawData, null, 2));\n\n      if (Array.isArray(rawData) && rawData.length > 0) {\n        sessionData = rawData[0];\n        isExistingSession = false;\n        console.log('‚úÖ Nueva sesi√≥n extra√≠da del array:', sessionData.session_id);\n      } else if (rawData && rawData.session_id) {\n        sessionData = rawData;\n        isExistingSession = false;\n        console.log('‚úÖ Nueva sesi√≥n como objeto directo:', sessionData.session_id);\n      } else {\n        console.log('‚ö†Ô∏è Formato inesperado de sesi√≥n nueva:', rawData);\n      }\n    } else {\n      console.log('‚ö†Ô∏è Nodo \"Crear sesi√≥n\" no disponible');\n    }\n  } catch (error) {\n    console.log('‚ùå Error al acceder a nueva sesi√≥n:', error.message);\n    try {\n      console.log('üîÑ Intentando m√©todo alternativo con .all()...');\n      const allNewSessions = $('Crear sesi√≥n').all();\n      console.log('   - Cantidad de elementos:', allNewSessions.length);\n\n      if (allNewSessions.length > 0) {\n        const firstSession = allNewSessions[0].json;\n        console.log('   - Primer elemento:', JSON.stringify(firstSession, null, 2));\n\n        if (Array.isArray(firstSession) && firstSession.length > 0) {\n          sessionData = firstSession[0];\n          console.log('‚úÖ Sesi√≥n del array alternativo:', sessionData.session_id);\n        } else if (firstSession && firstSession.session_id) {\n          sessionData = firstSession;\n          console.log('‚úÖ Sesi√≥n objeto alternativo:', sessionData.session_id);\n        }\n\n        if (sessionData) isExistingSession = false;\n      }\n    } catch (altError) {\n      console.log('‚ùå M√©todo alternativo tambi√©n fall√≥:', altError.message);\n    }\n  }\n}\n\n// PASO 3: Validaci√≥n final y fallback\nif (!sessionData || !sessionData.session_id) {\n  console.log('‚ö†Ô∏è FALLBACK: Creando sesi√≥n temporal');\n  console.log('   - sessionData actual:', sessionData);\n\n  sessionData = {\n    session_id: 'temp-' + Date.now(),\n    user_id: combinedData.user_profile?.user_id || 'demo_user',\n    current_stage: 'start',\n    completeness_score: 0,\n    conversation_data: {},\n    status: 'active'\n  };\n  isExistingSession = false;\n  console.log('üîÑ Sesi√≥n temporal creada:', sessionData.session_id);\n}\n\n// PASO 4: Extraer datos finales\nconst currentStage = sessionData.current_stage || sessionData.current_step || (isExistingSession ? 'discovery' : 'start');\nconst completenessScore = sessionData.completeness_score || sessionData.completeness || 0;\nconst sessionStatus = sessionData.status || 'active';\nconst conversationData = sessionData.conversation_data || sessionData.data || {};\n\n// üîç VALIDACI√ìN FINAL\nconsole.log('üéØ SESI√ìN FINAL SELECCIONADA:');\nconsole.log('   - Tipo:', isExistingSession ? 'EXISTENTE' : 'NUEVA');\nconsole.log('   - Session ID:', sessionData.session_id);\nconsole.log('   - User ID:', sessionData.user_id);\nconsole.log('   - Stage:', currentStage);\nconsole.log('   - Completeness:', completenessScore);\nconsole.log('   - Status:', sessionStatus);\nconsole.log('   - Historial total (para DB/auditor√≠a):', conversationHistory.length);\n\n// PASO 5: Crear input para Text Classifier (usa resumen, NO historial crudo)\nconst classifierInput = {\n  session_id: sessionData.session_id,\n\n  text: `Usuario: ${combinedData.user_profile?.name || 'Usuario'} (${combinedData.user_profile?.department || 'Sin departamento'})\nMensaje: ${combinedData.user_query}\nSession ID: ${sessionData.session_id}\nEtapa actual: ${currentStage}\nCompletitud: ${completenessScore}%\nEstado: ${sessionStatus}\nTipo de sesi√≥n: ${isExistingSession ? 'Continuaci√≥n' : 'Nueva'}${historyText}`,\n\n  session_data: {\n    session_id: sessionData.session_id,\n    user_query: combinedData.user_query,\n    current_step: currentStage,\n    user_profile: combinedData.user_profile || {},\n    completeness_score: completenessScore,\n    conversation_data: conversationData,\n    user_context: combinedData.user_context || {},\n\n    // Enviar SOLO el resumen al resto del flujo/LLM:\n    history_summary: (historyText || '').replace(/^\\nResumen historial:\\n/, ''),\n\n    // No enviar conversation_history al LLM; si lo necesitas para inserts en BD,\n    // cons√©rvalo en memoria y √∫salo en los nodos de escritura a DB.\n    is_existing_session: isExistingSession\n  },\n\n  user_id: sessionData.user_id || combinedData.user_profile?.user_id,\n  current_stage: currentStage,\n  is_existing_session: isExistingSession\n};\n\nconsole.log('üöÄ ENVIANDO AL TEXT CLASSIFIER:');\nconsole.log('   - Session ID confirmado:', classifierInput.session_id);\nconsole.log('   - Tipo de sesi√≥n:', isExistingSession ? 'EXISTENTE' : 'NUEVA');\n\nreturn [{ json: classifierInput }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        -96
      ],
      "id": "73fd63cd-d022-4ec9-a4c1-f56dff0bc804",
      "name": "Combinar datos de sesi√≥n"
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -3344,
        32
      ],
      "id": "c2c0dcd6-60e4-4460-92bb-dd819e08e489",
      "name": "Gemini clasificador",
      "credentials": {
        "googlePalmApi": {
          "id": "FJVKAIddO9aNIQ3y",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json.text }}",
        "categories": {
          "categories": [
            {
              "category": "discovery_agent",
              "description": "=Usuario en etapa inicial o necesita m√°s informaci√≥n. Etapa 'start' o 'discovery' con completitud menor a 75%."
            },
            {
              "category": "summary_agent",
              "description": " Usuario ha proporcionado suficiente informaci√≥n. Etapa 'discovery' con completitud 75% o mayor."
            },
            {
              "category": "report_sender",
              "description": "Usuario en etapa final, listo para recibir reporte. Etapa 'summary' completada."
            }
          ]
        },
        "options": {
          "multiClass": false,
          "systemPromptTemplate": "=Clasifica el texto en una de estas categor√≠as en {categories} bas√°ndote en la etapa y completitud:\n\nREGLAS DE CLASIFICACI√ìN:\n- discovery_agent: Si etapa='start' O (etapa='discovery' Y completitud < 75%)\n- summary_agent: Si etapa='discovery' Y completitud ‚â• 75%\n- report_sender: Si etapa='summary'\n\nFORMATO DE RESPUESTA:\nSolo responde con el nombre exacto de la categor√≠a: discovery_agent, summary_agent, o report_sender\n\nEJEMPLOS:\nTexto: \"Etapa actual: start, Completitud: 0%\" ‚Üí discovery_agent\nTexto: \"Etapa actual: discovery, Completitud: 45%\" ‚Üí discovery_agent  \nTexto: \"Etapa actual: discovery, Completitud: 85%\" ‚Üí summary_agent\nTexto: \"Etapa actual: summary, Completitud: 100%\" ‚Üí report_sender",
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1.1,
      "position": [
        -3184,
        -272
      ],
      "id": "534cffb9-ca4c-48fd-9624-118c086cffb4",
      "name": "Enrutador de agente"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, message, agent_name, created_at \nFROM conversation_messages \nWHERE session_id = '{{ $json.session_id }}'\nORDER BY created_at ASC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        608,
        -192
      ],
      "id": "8485025a-3e7d-4b95-b65c-d0d7d5598464",
      "name": "Extraer historial de conversaciones",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3072,
        -224
      ],
      "id": "255aba4b-2868-4b33-9d46-6e33b7db00c5",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "nQcWwWFBKt9zMZ8g",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "truncate session_states cascade;\nselect * from session_states;\nselect * from conversation_messages\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2240,
        -864
      ],
      "id": "8fdb963f-9de4-436d-8f0c-a36aff07e6f6",
      "name": "borrar todo",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "requests",
          "mode": "list",
          "cachedResultName": "requests"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1824,
        -768
      ],
      "id": "96dba576-0275-4755-8457-921183f8606d",
      "name": "select todo",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "scoring_configurations",
          "mode": "list",
          "cachedResultName": "scoring_configurations"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1776,
        -1056
      ],
      "id": "4f3baa0d-2549-4ab6-ad49-594991677a14",
      "name": "select todo1",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, message, agent_name, created_at\nFROM conversation_messages \nWHERE session_id = '{{ $json.session_id }}'\nORDER BY created_at ASC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3168,
        608
      ],
      "id": "50bc6236-bff3-4880-82f4-4ebf440c2109",
      "name": "Extraer historial de conversaciones1",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\nsession_id,\nuser_id,\ncurrent_stage,\nconversation_data,\ncompleteness_score,\nstatus,\nupdated_at FROM session_states\nWHERE user_id = 'u-qa-prof-01' AND status = 'active'\nORDER BY updated_at DESC LIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3440,
        608
      ],
      "id": "67bfe74b-14be-4607-b174-47f02b7dade9",
      "name": "Verificar Sesiones1",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * C√≥digo listo para pegar en un nodo Code de n8n llamado\n * \"Combinar datos de sesi√≥n\" (JavaScript).\n *\n * Integra:\n * - Lectura de \"Combinar datos\" (perfil + message)\n * - Detecci√≥n de sesi√≥n existente y, si no, uso de \"Crear sesi√≥n\"\n * - Extracci√≥n y RESUMEN del historial (compacto y etiquetado)\n * - Construcci√≥n de classifierInput con history_summary (no env√≠a historial crudo)\n *\n * Requisitos previos en el workflow:\n * - Nodo \"Combinar datos\" que produce:\n *    { user_profile: { user_id, name, department, role, ... }, user_query, user_context, ... }\n * - Nodo Postgres \"Verificar Sesiones\": entrega fila con session_id,... si existe\n * - Nodo Postgres \"Extraer historial de conversaciones\": SELECT role,message,agent_name,created_at ORDER BY created_at ASC\n * - Nodo Postgres \"Crear sesi√≥n\": en caso no exista (opcional seg√∫n tu flujo)\n */\n\nconst combinedData = $('Combinar datos').first().json;\nlet sessionData = null;\nlet isExistingSession = false;\n\n// Internos para logs y DB (no enviar al LLM la lista cruda)\nlet conversationHistory = [];\nlet historyText = ''; // aqu√≠ quedar√° el resumen compacto para Prompt/Clasificador\n\nconsole.log('=== INICIANDO PROCESAMIENTO DE SESI√ìN ===');\n\n// PASO 1: Intentar obtener sesi√≥n existente PRIMERO\ntry {\n  const existingSessionNode = $('Verificar Sesiones');\n  if (existingSessionNode && existingSessionNode.first) {\n    const existingData = existingSessionNode.first().json;\n\n    if (existingData && existingData.session_id) {\n      sessionData = existingData;\n      isExistingSession = true;\n\n      console.log('‚úÖ Sesi√≥n existente encontrada:');\n      console.log('   - Session ID:', sessionData.session_id);\n      console.log('   - Datos completos:', JSON.stringify(sessionData, null, 2));\n\n      // PASO 1.1: Extraer historial SOLO para sesi√≥n existente y COMPRIMIRLO\n      try {\n        const historyNode = $('Extraer historial de conversaciones');\n        if (historyNode && historyNode.all) {\n          const historyData = historyNode.all();\n\n          if (Array.isArray(historyData) && historyData.length > 0) {\n            // Aplana a array de {role, message, agent_name, created_at}\n            conversationHistory = historyData.flatMap(item => item.json || []);\n\n            // Orden cronol√≥gico ascendente si el SQL no lo garantizara\n            conversationHistory.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n\n            // Toma √∫ltimos N mensajes (ajusta N seg√∫n tu costo de tokens)\n            const last = conversationHistory.slice(-10);\n\n            // Limpieza por l√≠nea\n            const clean = (s) => String(s ?? '')\n              .replace(/\\s+/g, ' ')\n              .trim()\n              .slice(0, 240);\n\n            // Etiqueta: assistant usa agent_name si existe\n            const lines = last.map(m => {\n              const who = m.role === 'assistant'\n                ? (m.agent_name || 'assistant')\n                : (m.role || 'user');\n              return `${who}: ${clean(m.message)}`;\n            });\n\n            // Ensamblar resumen (usa '\\n' o ' | ')\n            const summary = lines.join('\\n');\n            historyText = `\\nResumen historial:\\n${summary}`;\n\n            console.log(`‚úÖ Historial resumido: ${conversationHistory.length} mensajes (√∫ltimos ${last.length})`);\n          }\n        }\n      } catch (error) {\n        console.log('‚ÑπÔ∏è Error al procesar historial:', error.message);\n      }\n    } else {\n      console.log('‚ÑπÔ∏è Sesi√≥n existente est√° vac√≠a o sin session_id');\n    }\n  } else {\n    console.log('‚ÑπÔ∏è Nodo \"Verificar Sesiones\" no disponible');\n  }\n} catch (error) {\n  console.log('‚ÑπÔ∏è Error al acceder a sesi√≥n existente:', error.message);\n}\n\n// PASO 2: Si NO hay sesi√≥n existente, usar datos de creaci√≥n de sesi√≥n\nif (!sessionData) {\n  console.log('üîÑ No hay sesi√≥n existente, buscando nueva sesi√≥n...');\n  try {\n    const newSessionNode = $('Crear sesi√≥n');\n    if (newSessionNode && newSessionNode.first) {\n      const rawData = newSessionNode.first().json;\n      console.log('üîç DEBUG - Datos crudos de Crear sesi√≥n:');\n      console.log('   - Tipo:', typeof rawData);\n      console.log('   - Es array:', Array.isArray(rawData));\n      console.log('   - Contenido:', JSON.stringify(rawData, null, 2));\n\n      if (Array.isArray(rawData) && rawData.length > 0) {\n        sessionData = rawData[0];\n        isExistingSession = false;\n        console.log('‚úÖ Nueva sesi√≥n extra√≠da del array:', sessionData.session_id);\n      } else if (rawData && rawData.session_id) {\n        sessionData = rawData;\n        isExistingSession = false;\n        console.log('‚úÖ Nueva sesi√≥n como objeto directo:', sessionData.session_id);\n      } else {\n        console.log('‚ö†Ô∏è Formato inesperado de sesi√≥n nueva:', rawData);\n      }\n    } else {\n      console.log('‚ö†Ô∏è Nodo \"Crear sesi√≥n\" no disponible');\n    }\n  } catch (error) {\n    console.log('‚ùå Error al acceder a nueva sesi√≥n:', error.message);\n    try {\n      console.log('üîÑ Intentando m√©todo alternativo con .all()...');\n      const allNewSessions = $('Crear sesi√≥n').all();\n      console.log('   - Cantidad de elementos:', allNewSessions.length);\n\n      if (allNewSessions.length > 0) {\n        const firstSession = allNewSessions[0].json;\n        console.log('   - Primer elemento:', JSON.stringify(firstSession, null, 2));\n\n        if (Array.isArray(firstSession) && firstSession.length > 0) {\n          sessionData = firstSession[0];\n          console.log('‚úÖ Sesi√≥n del array alternativo:', sessionData.session_id);\n        } else if (firstSession && firstSession.session_id) {\n          sessionData = firstSession;\n          console.log('‚úÖ Sesi√≥n objeto alternativo:', sessionData.session_id);\n        }\n\n        if (sessionData) isExistingSession = false;\n      }\n    } catch (altError) {\n      console.log('‚ùå M√©todo alternativo tambi√©n fall√≥:', altError.message);\n    }\n  }\n}\n\n// PASO 3: Validaci√≥n final y fallback\nif (!sessionData || !sessionData.session_id) {\n  console.log('‚ö†Ô∏è FALLBACK: Creando sesi√≥n temporal');\n  console.log('   - sessionData actual:', sessionData);\n\n  sessionData = {\n    session_id: 'temp-' + Date.now(),\n    user_id: combinedData.user_profile?.user_id || 'demo_user',\n    current_stage: 'start',\n    completeness_score: 0,\n    conversation_data: {},\n    status: 'active'\n  };\n  isExistingSession = false;\n  console.log('üîÑ Sesi√≥n temporal creada:', sessionData.session_id);\n}\n\n// PASO 4: Extraer datos finales\nconst currentStage = sessionData.current_stage || sessionData.current_step || (isExistingSession ? 'discovery' : 'start');\nconst completenessScore = sessionData.completeness_score || sessionData.completeness || 0;\nconst sessionStatus = sessionData.status || 'active';\nconst conversationData = sessionData.conversation_data || sessionData.data || {};\n\n// üîç VALIDACI√ìN FINAL\nconsole.log('üéØ SESI√ìN FINAL SELECCIONADA:');\nconsole.log('   - Tipo:', isExistingSession ? 'EXISTENTE' : 'NUEVA');\nconsole.log('   - Session ID:', sessionData.session_id);\nconsole.log('   - User ID:', sessionData.user_id);\nconsole.log('   - Stage:', currentStage);\nconsole.log('   - Completeness:', completenessScore);\nconsole.log('   - Status:', sessionStatus);\nconsole.log('   - Historial total (para DB/auditor√≠a):', conversationHistory.length);\n\n// PASO 5: Crear input para Text Classifier (usa resumen, NO historial crudo)\nconst classifierInput = {\n  session_id: sessionData.session_id,\n\n  text: `Usuario: ${combinedData.user_profile?.name || 'Usuario'} (${combinedData.user_profile?.department || 'Sin departamento'})\nMensaje: ${combinedData.user_query}\nSession ID: ${sessionData.session_id}\nEtapa actual: ${currentStage}\nCompletitud: ${completenessScore}%\nEstado: ${sessionStatus}\nTipo de sesi√≥n: ${isExistingSession ? 'Continuaci√≥n' : 'Nueva'}${historyText}`,\n\n  session_data: {\n    session_id: sessionData.session_id,\n    user_query: combinedData.user_query,\n    current_step: currentStage,\n    user_profile: combinedData.user_profile || {},\n    completeness_score: completenessScore,\n    conversation_data: conversationData,\n    user_context: combinedData.user_context || {},\n\n    // Enviar SOLO el resumen al resto del flujo/LLM:\n    history_summary: (historyText || '').replace(/^\\nResumen historial:\\n/, ''),\n\n    // No enviar conversation_history al LLM; si lo necesitas para inserts en BD,\n    // cons√©rvalo en memoria y √∫salo en los nodos de escritura a DB.\n    is_existing_session: isExistingSession\n  },\n\n  user_id: sessionData.user_id || combinedData.user_profile?.user_id,\n  current_stage: currentStage,\n  is_existing_session: isExistingSession\n};\n\nconsole.log('üöÄ ENVIANDO AL TEXT CLASSIFIER:');\nconsole.log('   - Session ID confirmado:', classifierInput.session_id);\nconsole.log('   - Tipo de sesi√≥n:', isExistingSession ? 'EXISTENTE' : 'NUEVA');\n\nreturn [{ json: classifierInput }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2656,
        640
      ],
      "id": "15e7cae9-2dfb-48e0-b581-8412fb9d0e74",
      "name": "Combinar datos de sesi√≥n1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2976,
        -560
      ],
      "id": "ebc61464-507b-464e-ab8c-13e23ee25f70",
      "name": "When clicking ‚ÄòExecute workflow‚Äô"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "  {\n    \"headers\": {\n      \"host\": \"n8n.automacore.shop\",\n      \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36\",\n      \"content-length\": \"388\",\n      \"accept\": \"*/*\",\n      \"accept-encoding\": \"gzip, br\",\n      \"accept-language\": \"es-ES,es;q=0.7\",\n      \"cdn-loop\": \"cloudflare; loops=1\",\n      \"cf-connecting-ip\": \"38.253.150.160\",\n      \"cf-ipcountry\": \"PE\",\n      \"cf-ray\": \"9688fd7a1a361eb9-EZE\",\n      \"cf-visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\",\n      \"cf-warp-tag-id\": \"4c0cc1bc-cbfb-4f86-910c-49f0a11078c3\",\n      \"connection\": \"keep-alive\",\n      \"content-type\": \"application/json\",\n      \"origin\": \"http://localhost:3000\",\n      \"priority\": \"u=1, i\",\n      \"referer\": \"http://localhost:3000/\",\n      \"sec-ch-ua\": \"\\\"Not)A;Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"138\\\", \\\"Brave\\\";v=\\\"138\\\"\",\n      \"sec-ch-ua-mobile\": \"?0\",\n      \"sec-ch-ua-platform\": \"\\\"Windows\\\"\",\n      \"sec-fetch-dest\": \"empty\",\n      \"sec-fetch-mode\": \"cors\",\n      \"sec-fetch-site\": \"cross-site\",\n      \"sec-gpc\": \"1\",\n      \"x-forwarded-for\": \"38.253.150.160\",\n      \"x-forwarded-proto\": \"https\"\n    },\n    \"params\": {},\n    \"query\": {},\n    \"body\": {\n        \"message\": \"Es en el e curso de sistemas distribuidos aunque tambien pasa en Redes 2, est√° afectando a muchso alumnos, casi al 80 o 90%, y es algo recurrente\",\n      \"user\": {\n        \"auth_token\": \"demo_token_user_001\",\n        \"user_id\": \"u-qa-prof-01\"\n      },\n      \"context\": {\n        \"timestamp\": \"2025-08-01T23:07:09.868Z\",\n        \"source\": \"portal_vercel\",\n        \"frontend_url\": \"http://localhost:3000/\",\n        \"user_name\": \"Usuario\",\n        \"user_area\": \"GTTD\"\n      }\n    },\n    \"webhookUrl\": \"https://n8n.automacore.shop/webhook-test/insightbot-test/chat\",\n    \"executionMode\": \"test\"\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2704,
        -560
      ],
      "id": "3a3a1f63-eb76-43d5-b349-d183077bc013",
      "name": "Set"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "3e18a8a2-038f-4fa8-b467-479b3a1b7fe6",
              "leftValue": "={{ $json.session_data.completeness_score }}",
              "rightValue": 75,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3456,
        240
      ],
      "id": "22d26a38-a984-4a9f-bddf-a56bc43a5b3e",
      "name": "¬øResumen Previo?"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.5
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1296,
        112
      ],
      "id": "3dba0e10-4688-42b0-8568-24cfce3031d2",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "FJVKAIddO9aNIQ3y",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# CONTEXTO PARA TU PR√ìXIMA PREGUNTA\n\n## Perfil del Solicitante:\n- Nombre: {{ String($('Combinar datos de sesi√≥n').item.json.session_data?.user_profile?.name || '') }}\n\n- Departamento: {{ String($('Combinar datos de sesi√≥n').item.json.session_data?.user_profile?.department || '') }}\n\n- Rol: {{ String($('Combinar datos de sesi√≥n').item.json.session_data?.user_profile?.role || '') }}\n\n\n## Historial de la Conversaci√≥n (Resumen):\n{{ JSON.stringify($('Combinar datos de sesi√≥n').item.json.session_data?.history_summary || '', null, 0) }}\n\n## √öltimo Mensaje del Usuario:\n{{ String($('Combinar datos de sesi√≥n').item.json.session_data?.user_query || '') }}\n\n---\nBasado en este contexto, formula la siguiente pregunta que har√≠as para avanzar en el descubrimiento de la solicitud.\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "==# SYSTEM PROMPT - AGENTE DE CONVERSACI√ìN DISCOVERY \n\n## 1. TU IDENTIDAD Y MISI√ìN\nEres InsightBot, un asistente de descubrimiento conversacional experto del Portal de Innovaci√≥n GTTD de la UTP. Tu misi√≥n es guiar amablemente a los usuarios para que estructuren sus solicitudes tecnol√≥gicas. Tu objetivo NO es resolver el problema, sino CLARIFICARLO mediante una conversaci√≥n natural.\n\n## 2. TUS DOS TAREAS PRINCIPALES\nEn cada turno, debes realizar dos acciones en este orden:\n\n1.  **EXTRAER**: Analiza el √∫ltimo mensaje del usuario y el historial de conversaci√≥n, luego extrae textualmente cualquier informaci√≥n que corresponda a los campos de descubrimiento. No inventes ni normalices nada, solo extrae lo que el usuario dijo.\n2.  **PREGUNTAR**: Basado en la informaci√≥n que A√öN FALTA, formula la siguiente pregunta l√≥gica para avanzar en la conversaci√≥n.\n\n## 3. EL PROCESO DE DESCUBRIMIENTO (Los Campos Clave a Rellenar)\nTu objetivo es obtener informaci√≥n para los siguientes campos. Usa esta lista para guiar tu l√≥gica de preguntas:\n\n-   `problema_principal`: ¬øCu√°l es el dolor o la necesidad espec√≠fica?\n-   `objetivo_esperado`: ¬øC√≥mo se ve el √©xito para el usuario? ¬øQu√© resultado tangible busca?\n-   `beneficiarios`: ¬øQui√©nes (roles, departamentos) y cu√°ntas personas se ven afectadas o beneficiadas?\n-   `plataformas_involucradas`: ¬øQu√© sistemas de la UTP est√°n relacionados? (Canvas, SAP, PeopleSoft, etc.)\n-   `frecuencia_uso`: ¬øCon qu√© frecuencia se usar√≠a la soluci√≥n? (diaria, semanal, mensual)\n-   `plazo_deseado`: ¬øEn cu√°nto tiempo se esperan ver los primeros resultados?\n-   `departamento_solicitante`: El √°rea del usuario (generalmente ya viene en el perfil).\n\n## 4. TU L√ìGICA DE DECISI√ìN (C√≥mo elegir la siguiente pregunta)\nAnaliza el historial y el √∫ltimo mensaje para identificar el campo m√°s importante que falta, y luego haz una pregunta espec√≠fica sobre √©l.\n\n-   **SI el `problema_principal` u `objetivo_esperado` no est√°n claros**: Pregunta para profundizar en el dolor o el resultado ideal.\n    -   *Ejemplo: \"Ok, la plataforma est√° lenta. Si funcionara perfectamente, ¬øqu√© te permitir√≠a hacer que ahora no puedes?\"*\n-   **SI los `beneficiarios` o `plataformas_involucradas` no est√°n claros**: Pregunta por el alcance o los sistemas.\n    -   *Ejemplo: \"¬°Gracias por el detalle! Para entender la magnitud, ¬øa cu√°ntos estudiantes o profesores afectar√≠a esta mejora?\"*\n-   **SI todo lo anterior est√° cubierto**: Pregunta por `frecuencia_uso` o `plazo_deseado`.\n    -   *Ejemplo: \"Esto suena muy √∫til. Para planificarlo bien, ¬øen cu√°nto tiempo te gustar√≠a empezar a ver los primeros resultados?  Podr√≠a ser en menos de un mes, de 1 a 3 meses, o m√°s adelante.\"*\n\n## 5. ADAPTACI√ìN AL USUARIO (Personalizaci√≥n)\nAjusta tus preguntas seg√∫n el rol y departamento del usuario para demostrar que entiendes su contexto.\n\n## 6. REGLAS DE ORO Y FORMATO DE SALIDA\n-   **UNA PREGUNTA A LA VEZ**: Tu `next_question` debe ser siempre una sola pregunta.\n-   **S√â BREVE Y DIRECTO**: Ve al grano.\n-   **MANT√âN EL TONO COLOQUIAL Y AMIGABLE**.\n-   **FORMATO DE SALIDA OBLIGATORIO**: Responde SIEMPRE con un objeto JSON que contenga TRES campos:\n    - `next_question`: Un string con la siguiente pregunta para el usuario.\n    - `extracted_data`: Un objeto con los campos que pudiste extraer.\n    - `is_discovery_complete`: Un booleano. Ponlo en `true` SOLO si crees que ya tienes informaci√≥n para TODOS los 6 campos clave del descubrimiento.\n\n## 7. CRITERIO DE COMPLETITUD (`is_discovery_complete`)\nSolo debes poner `is_discovery_complete` en `true` si est√°s **absolutamente seguro** de tener una respuesta clara y expl√≠cita para **CADA UNO** de los 6 campos clave. Si es as√≠, solo genera el booleano, no generes un `next_question`.\n- **Revisa tu trabajo**: Antes de poner `true`, preg√∫ntate a ti mismo: \"¬øTengo una descripci√≥n clara del problema? ¬øS√© exactamente qui√©nes son los beneficiarios y cu√°ntos son? ¬øConozco el objetivo final?\".\n- **En caso de duda, pregunta**: Si un campo est√° impl√≠cito pero no expl√≠cito, es mejor hacer una pregunta m√°s para confirmar.\n- Si es as√≠, solo genera el booleano, no generes un next_question",
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1296,
        -96
      ],
      "id": "f24953c8-cb47-4000-b26d-2d28d36acc1a",
      "name": "Agente Descubridor de necesidades"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE session_states\nSET\n  completeness_score = {{ $('Calculando Nuevo Score').first().json.total_score }},\n  conversation_data = conversation_data || '{{ JSON.stringify($('Normalizador de Datos').first().json.output) }}'::jsonb,\n  current_stage = 'summary', -- ¬°Cambiamos la etapa!\n  updated_at = NOW()\nWHERE\n  session_id = '{{ $('Combinar datos de sesi√≥n').first().json.session_data.session_id }}';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2832,
        -480
      ],
      "id": "034aadfd-1a5b-436c-9fbf-12c04d501fc3",
      "name": "Actualizar estado de la sesi√≥n",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_active_scoring_config();\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -336,
        -64
      ],
      "id": "63b3d38d-4663-4964-a829-36317520a5fc",
      "name": "Obtener configuraciones",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"next_question\": {\n      \"type\": \"string\",\n      \"description\": \"La siguiente pregunta clara, breve y amigable para el usuario, formulada para obtener la informaci√≥n que falta.\"\n    },\n    \"extracted_data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"problema_principal\": {\n          \"type\": \"string\",\n          \"description\": \"El problema o necesidad principal extra√≠do textualmente del √∫ltimo mensaje del usuario.\"\n        },\n        \"objetivo_esperado\": {\n          \"type\": \"string\",\n          \"description\": \"El resultado o meta que el usuario mencion√≥ en su √∫ltimo mensaje.\"\n        },\n        \"plataformas_involucradas\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Lista de plataformas o sistemas que el usuario mencion√≥ expl√≠citamente.\"\n        },\n        \"beneficiarios\": {\n          \"type\": \"string\",\n          \"description\": \"Las personas o roles que el usuario identific√≥ como beneficiarios.\"\n        },\n        \"frecuencia_uso\": {\n          \"type\": \"string\",\n          \"description\": \"La frecuencia de uso mencionada por el usuario (ej: 'todos los d√≠as', 'una vez al mes').\"\n        },\n        \"plazo_deseado\": {\n          \"type\": \"string\",\n          \"description\": \"El plazo deseado expresado por el usuario (ej: 'en menos de un mes', 'de 1 a 3 meses'). El agente debe normalizarlo a uno de los valores siguientes: menos_1_mes, 1_a_3_meses, 3_a_6_meses, sin_definir.\"\n        }\n      },\n      \"description\": \"Un objeto que contiene √öNICAMENTE la informaci√≥n nueva extra√≠da del √∫ltimo mensaje del usuario. Si no se extrajo informaci√≥n para un campo, este debe ser omitido.\"\n    },\n    \"is_discovery_complete\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"next_question\",\n    \"extracted_data\",\n    \"is_discovery_complete\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1488,
        112
      ],
      "id": "06e0312b-a042-4103-b19a-d3761473ee26",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"plataformas_involucradas\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"departamento_solicitante\": { \"type\": \"string\" },\n    \"frecuencia_uso\": { \"type\": \"string\" },\n    \"plazo_deseado\": { \"type\": \"string\" },\n    \"problema_principal\": { \"type\": \"string\" },\n    \"objetivo_esperado\": { \"type\": \"string\" },\n    \"beneficiarios\": { \"type\": \"string\" }\n  },\n  \"description\": \"Objeto con los datos normalizados.\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2176,
        -304
      ],
      "id": "71e1ce6a-67cf-4653-a970-ab778d5b6915",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1968,
        -304
      ],
      "id": "ecfcad7e-8ad7-4225-b52d-ffb1e1116b51",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "FJVKAIddO9aNIQ3y",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Normaliza este JSON:\n{{ JSON.stringify($('Agente Descubridor de necesidades').first().json.output.extracted_data) }}\n\n# Usa estas reglas:\n- plataformas_involucradas: {{ JSON.stringify($('Obtener configuraciones').first().json.get_active_scoring_config.valid_enums.plataformas_involucradas) }}\n- departamento_solicitante: {{ JSON.stringify($('Obtener configuraciones').first().json.get_active_scoring_config.valid_enums.departamento_solicitante) }}\n- frecuencia_uso: {{ JSON.stringify($('Obtener configuraciones').first().json.get_active_scoring_config.valid_enums.frecuencia_uso) }}\n- plazo_deseado:\n- Si contiene \"menos de un mes\" o \"inmediato\" -> \"menos_1_mes\"\n- Si contiene \"1 a 3 meses\" -> \"1_a_3_meses\"\n- Si contiene \"3 a 6 meses\" -> \"3_a_6_meses\"\n- Si no est√° definido o no es claro -> \"sin_definir\"\n\n\n# Responde solo con el JSON normalizado. Omite campos que no puedas mapear.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un asistente de normalizaci√≥n de datos altamente preciso. Tu √∫nica tarea es tomar un objeto JSON con datos en lenguaje natural y convertir sus valores a un formato estricto predefinido. Si un valor no se puede mapear claramente, d√©jalo como `null`. No inventes informaci√≥n."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1984,
        -480
      ],
      "id": "a662556c-108c-4e4c-a063-e75b0a515573",
      "name": "Normalizador de Datos"
    },
    {
      "parameters": {
        "jsCode": "// 1. Plantilla con todos los campos requeridos por la API\nconst apiTemplate = {\n  problema_principal: null, objetivo_esperado: null,\n  plataformas_involucradas: [], beneficiarios: null,\n  frecuencia_uso: null, plazo_deseado: null,\n  departamento_solicitante: null\n};\n\n// 2. Cargar la memoria de la sesi√≥n\nconst sessionMemoryRaw = $('Combinar datos de sesi√≥n').first().json.session_data.conversation_data || {};\n\n// 3. LIMPIEZA: Crear una versi√≥n limpia de la memoria,\n//    conteniendo solo las claves que nos interesan.\nconst sessionMemoryClean = {};\nfor (const key in apiTemplate) {\n  if (sessionMemoryRaw.hasOwnProperty(key)) {\n    sessionMemoryClean[key] = sessionMemoryRaw[key];\n  }\n}\n\n// 4. Cargar los datos reci√©n normalizados de este turno\nconst normalizedData = $('Normalizador de Datos').first().json.output;\n\n// 5. Fusionar todo en orden.\nconst finalRequestData = { ...apiTemplate, ...sessionMemoryClean, ...normalizedData };\n\n// Devolver el payload final para la API\nreturn { request: finalRequestData };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2384,
        -480
      ],
      "id": "2410d405-f497-4852-a9d2-6db44cde865e",
      "name": "Preparar Cuerpo para Scoring"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "524b0ea0-6d57-45d4-820b-f25fdeee6fa0",
              "name": "response_type",
              "value": "validation_summary",
              "type": "string"
            },
            {
              "id": "2013607d-83eb-4c20-91d8-03aeb165cfe0",
              "name": "summary",
              "value": "={{ $('Agente de An√°lisis Final').first().json.output }}",
              "type": "object"
            },
            {
              "id": "bf352cbc-4cef-465f-959a-62b99bc91859",
              "name": "session_id",
              "value": "={{ $('Combinar datos de sesi√≥n').first().json.session_id }}",
              "type": "string"
            },
            {
              "id": "8d09a1ab-0760-4b27-93fb-7b2a8324dde9",
              "name": "text",
              "value": "He recopilado la siguiente informaci√≥n. Por favor, confirma si es correcta para poder continuar.",
              "type": "string"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3680,
        -480
      ],
      "id": "42da0771-9633-4d83-8775-f2f949f92664",
      "name": "Construir respuesta para frontend"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3000/api/analysis/simple-calculate",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2592,
        -480
      ],
      "id": "49272d3c-96fa-437c-9838-34d28497ff08",
      "name": "Calculando Nuevo Score"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.is_discovery_complete }}",
                    "rightValue": "=",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "8e065d25-3b61-4999-8516-bbf30b5f6749"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Descubrimiento Completo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a27d999-f012-4ae8-98c3-d908c51cf9ee",
                    "leftValue": "={{ $json.output.is_discovery_complete }}",
                    "rightValue": "={{ $json.output.is_discovery_complete }}",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Seguir descubriendo"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1712,
        -160
      ],
      "id": "5bc829b1-6174-4b65-90a2-44895ccee623",
      "name": "¬øDescubrimiento Completo?"
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, GET, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2208,
        -64
      ],
      "id": "1a2c96e2-171e-4634-a80c-5128cb0469dd",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversation_messages\n  (message_id, session_id, role, message, agent_name, created_at)\nVALUES\n  (\n    gen_random_uuid(),\n    '{{ $('Construir respuesta para frontend1').first().json.session_id }}',\n    'assistant',\n    '{{ $('Construir respuesta para frontend1').first().json.text }}',\n    'discovery_agent',\n    NOW()\n  );\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2432,
        -64
      ],
      "id": "07adb512-7ce5-485a-ae17-b31b85da0477",
      "name": "Guardar mensaje del asistente en conversaciones1",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE session_states\nSET\n   -- Usamos el operador || para fusionar el JSON existente con el nuevo\n    conversation_data = conversation_data || '{{ JSON.stringify($('Agente Descubridor de necesidades').first().json.output.extracted_data) }}'::jsonb,\n  current_stage = 'discovery',\n  updated_at = NOW()\nWHERE\n  session_id = '{{ $('Combinar datos de sesi√≥n').first().json.session_data.session_id }}';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2656,
        -64
      ],
      "id": "566ebfa8-b060-4c76-a2be-aca84ca52142",
      "name": "Actualizar estado de la sesi√≥n1",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "524b0ea0-6d57-45d4-820b-f25fdeee6fa0",
              "name": "response_type",
              "value": "text",
              "type": "string"
            },
            {
              "id": "2013607d-83eb-4c20-91d8-03aeb165cfe0",
              "name": "text",
              "value": "={{ $('Agente Descubridor de necesidades').first().json.output.next_question }}",
              "type": "string"
            },
            {
              "id": "bf352cbc-4cef-465f-959a-62b99bc91859",
              "name": "session_id",
              "value": "={{ $('Combinar datos de sesi√≥n').first().json.session_data.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2000,
        -64
      ],
      "id": "425ef6ca-00b6-4110-84ae-5dc80d7acaba",
      "name": "Construir respuesta para frontend1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversation_messages\n  (message_id, session_id, role, message, agent_name, created_at)\nVALUES\n  (\n    gen_random_uuid(),\n    '{{ $('Combinar datos de sesi√≥n').first().json.session_id }}',\n    'assistant',\n    -- CORRECCI√ìN: Usamos .replace() para escapar las comillas simples\n    '{{ $('Agente de An√°lisis Final').first().json.output.resumen_ejecutivo.replace(/'/g, \"''\") }}',\n    'summary_agent',\n    NOW()\n  );\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3472,
        -480
      ],
      "id": "32a6a173-52fa-44b9-81e4-2252f65a2915",
      "name": "Guardar mensaje de resumen",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# CONTEXTO COMPLETO PARA AN√ÅLISIS Y S√çNTESIS FINAL\n\n## 1. Perfil del Solicitante\n- **Nombre**: {{ JSON.stringify($('Combinar datos de sesi√≥n').first().json.session_data.user_profile.name) }}\n- **Departamento**: {{ JSON.stringify($('Combinar datos de sesi√≥n').first().json.session_data.user_profile.department) }}\n- **Rol**: {{ JSON.stringify($('Combinar datos de sesi√≥n').first().json.session_data.user_profile.role) }}\n\n## 2. Score Final Calculado\n- **Score**: {{ JSON.stringify($('Calculando Nuevo Score').first().json.total_score) }}\n- **Clasificaci√≥n Sugerida (por algoritmo)**: {{ JSON.stringify($('Calculando Nuevo Score').first().json.classification) }}\n- **Prioridad Sugerida (por algoritmo)**: {{ JSON.stringify($('Calculando Nuevo Score').first().json.priority) }}\n\n## 3. Historial Completo de la Conversaci√≥n\n{{ JSON.stringify($('Combinar datos de sesi√≥n').first().json.session_data.history_summary) }}\n\n## 4. Datos Acumulados y Normalizados\n{{ JSON.stringify($('Normalizador de Datos').first().json.output) }}\n\n---\n## INSTRUCCI√ìN:\nAnaliza toda la informaci√≥n proporcionada y genera el **Informe T√©cnico Final** estructurado. Aseg√∫rate de que el `resumen_ejecutivo` sea claro y ofrezca una recomendaci√≥n.\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# SYSTEM PROMPT - AGENTE DE AN√ÅLISIS FINAL (v3.0)\n\n## 1. TU IDENTIDAD Y MISI√ìN\nEres InsightBot en modo **Analista Experto**. Tu √∫nica misi√≥n es tomar el historial de una conversaci√≥n y los datos ya recopilados para generar un **Informe T√©cnico Final** estructurado y preciso. Tu audiencia son los l√≠deres de la GTTD, por lo que tu lenguaje debe ser profesional, claro y orientado a la toma de decisiones.\n\n## 2. CONTEXTO DE NEGOCIO (Configuraci√≥n Activa del Sistema)\nDebes usar las siguientes reglas de negocio, obtenidas de la configuraci√≥n activa del sistema, para justificar tus conclusiones en el `resumen_ejecutivo`.\n\n- Un requerimiento se clasifica como **\"proyecto\"** si su score final es >= **{{ $('Obtener configuraciones').first().json.get_active_scoring_config.classification_thresholds.project_min_score }}**.\n- Una prioridad **\"P1\"** se asigna si el score final es >= **{{ $('Obtener configuraciones').first().json.get_active_scoring_config.classification_thresholds.priority_p1_min }}**.\n- El departamento del solicitante, **'{{ $('Combinar datos de sesi√≥n').first().json.session_data.user_profile.department }}'**, tiene un peso de importancia de **{{ $('Obtener configuraciones').first().json.get_active_scoring_config.department_weights[$('Combinar datos de sesi√≥n').first().json.session_data.user_profile.department] || 1.0 }}**.\n\n## 3. REGLAS DE PROCESAMIENTO\n- **S√≠ntesis, no repetici√≥n**: No copies y pegues el historial. Sintetiza la informaci√≥n en los campos correspondientes.\n- **Inferencia Profesional**: Usa tu conocimiento del contexto UTP (Canvas, SAP, etc.) para enriquecer el an√°lisis.\n- **`resumen_ejecutivo`**: Este es el campo m√°s importante. Debe ser un p√°rrafo conciso que resuma el problema, el objetivo y una recomendaci√≥n clara para el l√≠der.\n- **`score_estimado`**: Usa el score final calculado que se te proporciona como contexto. No lo inventes.\n\n## 4. FORMATO DE SALIDA OBLIGATORIO\nResponde SIEMPRE y √öNICAMENTE con el objeto JSON definido en el Output Parser. No incluyas texto adicional antes o despu√©s del JSON.\n",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        3072,
        -480
      ],
      "id": "f0e4eed9-e9d2-49c0-8907-952097e643f1",
      "name": "Agente de An√°lisis Final"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.session_data.completeness_score  }}",
                    "rightValue": 90,
                    "operator": {
                      "type": "number",
                      "operation": "gte"
                    },
                    "id": "bc6b137a-f39f-48b0-a216-7b4de33266d4"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Agente de Resumen"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c3d57dfd-0445-4d7d-a932-513b2ef166e7",
                    "leftValue": "={{$json.session_data.completeness_score  }}",
                    "rightValue": 90,
                    "operator": {
                      "type": "number",
                      "operation": "lt"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Agente Descubridor"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2304,
        -400
      ],
      "id": "57d45e36-49cc-4297-b340-f5f7ff26fa66",
      "name": "Rutas"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversation_messages\n  (message_id, session_id, role, message, created_at)\nVALUES\n  (\n    gen_random_uuid(),\n    '{{ $json.session_id }}',\n    'user',\n    '{{ $json.session_data.user_query }}',\n    NOW()\n  );\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1104,
        -96
      ],
      "id": "b9a97af6-529c-4487-8479-46249106d7ee",
      "name": "Guardando mensaje del usuario",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_active_scoring_config();\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2864,
        -64
      ],
      "id": "cfbe0126-fbe1-4221-8944-c0c809c811cf",
      "name": "Obtener configuraciones1",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.body.event.type}}",
                    "rightValue": "SUMMARY_CONFIRMED",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e4f77c9b-02ae-4632-a1c1-14ba77c5522b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Finalizaci√≥n de solicitud"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "28914cff-d332-4efc-b073-050e66a9324b",
                    "leftValue": "={{$json.body.event.type}}",
                    "rightValue": "N8N_VALIDATION",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Flujo normal"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1280,
        -336
      ],
      "id": "682c7151-009b-4725-a83c-0070a8f25512",
      "name": "Router Principal de Eventos"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT conversation_data, user_id, current_stage, completeness_score\nFROM public.session_states\nWHERE session_id = '{{$json.body.session_id}}'\nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -608,
        -592
      ],
      "id": "bd4e5a03-1903-4a80-b447-30e3cc52af9a",
      "name": "Obtener Sesi√≥n para Finalizar",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.requests\nSET\n  technical_analysis = '{{JSON.stringify($json.output)}}'::jsonb,\n  status = 'pending_approval'\nWHERE id = '{{$(\"Insertar Request con pendiente de an√°lisis t√©cnico\").first().json.id}}'::uuid\nRETURNING id;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        688,
        -592
      ],
      "id": "e46bb666-afae-4c52-8002-6abbb514b67c",
      "name": "Guardar Solicitud Final",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE session_states\nSET status = 'completed', updated_at = NOW()\nWHERE session_id = '{{ $json.body.session_id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        976,
        -592
      ],
      "id": "e1beb2c9-a97a-4c12-bcf8-a882c60cf832",
      "name": "Cerrar Sesi√≥n",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f17fefb5-ccce-4283-b515-b159558d4f49",
              "name": "response_type",
              "value": "text",
              "type": "string"
            },
            {
              "id": "5562bb5f-55c1-4edf-9a9d-74f3f8861baa",
              "name": "text",
              "value": "=¬°Listo! Tu solicitud ha sido enviada con el folio #{{ $('Guardar Solicitud Final').first().json.id }}",
              "type": "string"
            },
            {
              "id": "0996875e-04cb-4cc0-8396-e878d5b6a0f4",
              "name": "session_id",
              "value": "={{ $json.body.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1248,
        -592
      ],
      "id": "fff79c3c-e80c-4a5a-8620-9f08d44d6f7b",
      "name": "Construir Respuesta Final"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1520,
        -592
      ],
      "id": "3d1f91ab-05a2-4e6a-9dcc-d30f9e577ec1",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"analysis_input\": {\n    \"titulo\": \"={{$('Obtener Sesi√≥n para Finalizar').first().json.conversation_data.titulo_solicitud}}\",\n    \"problema\": \"={{$('Obtener Sesi√≥n para Finalizar').first().json.conversation_data.problema_principal}}\",\n    \"objetivo\": \"={{$('Obtener Sesi√≥n para Finalizar').first().json.conversation_data.objetivo_esperado}}\",\n    \"plataformas\": ={{$('Obtener Sesi√≥n para Finalizar').first().json.conversation_data.plataformas_involucradas || []}},\n    \"frecuencia\": \"={{$('Obtener Sesi√≥n para Finalizar').first().json.conversation_data.frecuencia_uso}}\",\n    \"departamento\": \"={{$('Obtener Sesi√≥n para Finalizar').first().json.conversation_data.departamento_solicitante}}\",\n    \"clasificacion_sugerida\": \"={{$('Obtener Sesi√≥n para Finalizar').first().json.conversation_data.clasificacion_sugerida}}\",\n    \"prioridad_sugerida\": \"={{$('Obtener Sesi√≥n para Finalizar').first().json.conversation_data.prioridad_sugerida}}\",\n    \"score_estimado\": ={{$('Obtener Sesi√≥n para Finalizar').first().json.completeness_score || 0}}\n  },\n  \"session_id\": \"={{$json.body.session_id}}\",\n  \"user_id\": \"={{$('Obtener Sesi√≥n para Finalizar').first().json.user_id}}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -16,
        -592
      ],
      "id": "c26535d2-899f-4efd-a723-0883c4a627dc",
      "name": "Resumen de solicitud"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"affected_systems\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"integration_points\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"dependencies\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"estimated_effort\": { \"type\": \"string\" },\n    \"data_sensitivity\": { \"type\": \"string\" },\n    \"security_implications\": { \"type\": \"string\" },\n    \"compliance_flags\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"recommended_architecture\": { \"type\": \"string\" },\n    \"data_sources_detected\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"suggested_envs\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"suggested_owners\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"risk_items\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n  },\n  \"required\": [\n    \"affected_systems\",\"integration_points\",\"dependencies\",\n    \"estimated_effort\",\"recommended_architecture\",\"risk_items\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        448,
        -384
      ],
      "id": "d2bd1756-d201-4172-b10d-d4ccdadef61f",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        240,
        -400
      ],
      "id": "b1ce222c-4af7-4de2-b710-0b4264a9dd7c",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "FJVKAIddO9aNIQ3y",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.requests (\n  session_id, user_id, titulo_solicitud, problema_principal, objetivo_esperado,\n  beneficiarios, plataformas_involucradas, frecuencia_uso, plazo_deseado,\n  departamento_solicitante, score_estimado, clasificacion_sugerida, prioridad_sugerida\n) VALUES (\n  '{{$json.body.session_id}}'::uuid,\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.user_id}}',\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.titulo_solicitud}}',\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.problema_principal}}',\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.objetivo_esperado}}',\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.beneficiarios}}',\n  '{{JSON.stringify($(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.plataformas_involucradas || [])}}'::jsonb,\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.frecuencia_uso}}',\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.plazo_deseado}}',\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.departamento_solicitante}}',\n  COALESCE({{$(\"Obtener Sesi√≥n para Finalizar\").first().json.completeness_score}}, 0),\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.clasificacion_sugerida}}',\n  '{{$(\"Obtener Sesi√≥n para Finalizar\").first().json.conversation_data.prioridad_sugerida}}'\n)\nRETURNING id, created_at;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -320,
        -592
      ],
      "id": "1cb7da8b-4224-4369-9c4c-43603b85e630",
      "name": "Insertar Request con pendiente de an√°lisis t√©cnico",
      "credentials": {
        "postgres": {
          "id": "yumcCdrdDTSkZ7JN",
          "name": "Postgres n8n historial"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.analysis_input}}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Eres Arquitecto T√©cnico de UTP. Tu salida debe ser EXCLUSIVAMENTE un JSON V√ÅLIDO que cumpla el esquema provisto. No incluyas texto extra. Analiza para uso interno del l√≠der de dominio, no para el solicitante. Considera: sistemas/plataformas UTP, puntos de integraci√≥n, dependencias, sensibilidad de datos, implicancias de seguridad, cumplimiento (privacidad/pol√≠ticas UTP), esfuerzo estimado de alto nivel, riesgos, entornos recomendados (dev/test/prod), y equipos/roles sugeridos como owners. Si algo no aplica, devuelve [] o \"\" seg√∫n corresponda. No inventes sistemas que no se puedan inferir del contexto.\n\nEsquema de salida: { \"affected_systems\": string[], \"integration_points\": string[], \"dependencies\": string[], \"estimated_effort\": string, \"data_sensitivity\": string, \"security_implications\": string, \"compliance_flags\": string[], \"recommended_architecture\": string, \"data_sources_detected\": string[], \"suggested_envs\": string[], \"suggested_owners\": string[], \"risk_items\": string[] }",
          "maxIterations": 3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        256,
        -592
      ],
      "id": "df58f9b9-e892-4f88-b8bd-8416ef583e42",
      "name": "Agente de An√°lisis T√©cnico"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Router Principal de Eventos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Agente de An√°lisis Final",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Salida de Error": {
      "main": [
        []
      ]
    },
    "Edit Fields": {
      "main": [
        []
      ]
    },
    "Extract JSON from Output": {
      "main": [
        []
      ]
    },
    "User Profile Data": {
      "main": [
        [
          {
            "node": "Obtener configuraciones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combinar datos": {
      "main": [
        [
          {
            "node": "Verificar Sesiones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Sesiones": {
      "main": [
        [
          {
            "node": "¬øHay sesi√≥n activa?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¬øHay sesi√≥n activa?": {
      "main": [
        [
          {
            "node": "Extraer historial de conversaciones",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Crear sesi√≥n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear sesi√≥n": {
      "main": [
        [
          {
            "node": "Combinar datos de sesi√≥n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combinar datos de sesi√≥n": {
      "main": [
        [
          {
            "node": "Guardando mensaje del usuario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini clasificador": {
      "ai_languageModel": [
        [
          {
            "node": "Enrutador de agente",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enrutador de agente": {
      "main": [
        []
      ]
    },
    "Extraer historial de conversaciones": {
      "main": [
        [
          {
            "node": "Combinar datos de sesi√≥n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agente de An√°lisis Final",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Extraer historial de conversaciones1": {
      "main": [
        [
          {
            "node": "Combinar datos de sesi√≥n1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Sesiones1": {
      "main": [
        [
          {
            "node": "Extraer historial de conversaciones1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‚ÄòExecute workflow‚Äô": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        []
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Agente Descubridor de necesidades",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Agente Descubridor de necesidades": {
      "main": [
        [
          {
            "node": "¬øDescubrimiento Completo?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar estado de la sesi√≥n": {
      "main": [
        [
          {
            "node": "Agente de An√°lisis Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener configuraciones": {
      "main": [
        [
          {
            "node": "Combinar datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Agente Descubridor de necesidades",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Normalizador de Datos",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Normalizador de Datos",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Normalizador de Datos": {
      "main": [
        [
          {
            "node": "Preparar Cuerpo para Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Cuerpo para Scoring": {
      "main": [
        [
          {
            "node": "Calculando Nuevo Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculando Nuevo Score": {
      "main": [
        [
          {
            "node": "Actualizar estado de la sesi√≥n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir respuesta para frontend": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "¬øDescubrimiento Completo?": {
      "main": [
        [
          {
            "node": "Normalizador de Datos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Construir respuesta para frontend1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook1": {
      "main": [
        [
          {
            "node": "Guardar mensaje del asistente en conversaciones1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar mensaje del asistente en conversaciones1": {
      "main": [
        [
          {
            "node": "Actualizar estado de la sesi√≥n1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir respuesta para frontend1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar mensaje de resumen": {
      "main": [
        [
          {
            "node": "Construir respuesta para frontend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente de An√°lisis Final": {
      "main": [
        [
          {
            "node": "Guardar mensaje de resumen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardando mensaje del usuario": {
      "main": [
        [
          {
            "node": "Agente Descubridor de necesidades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Router Principal de Eventos": {
      "main": [
        [
          {
            "node": "Obtener Sesi√≥n para Finalizar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "User Profile Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Sesi√≥n para Finalizar": {
      "main": [
        [
          {
            "node": "Insertar Request con pendiente de an√°lisis t√©cnico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar Solicitud Final": {
      "main": [
        [
          {
            "node": "Cerrar Sesi√≥n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cerrar Sesi√≥n": {
      "main": [
        [
          {
            "node": "Construir Respuesta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir Respuesta Final": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resumen de solicitud": {
      "main": [
        [
          {
            "node": "Agente de An√°lisis T√©cnico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Agente de An√°lisis T√©cnico",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Agente de An√°lisis T√©cnico",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Insertar Request con pendiente de an√°lisis t√©cnico": {
      "main": [
        [
          {
            "node": "Resumen de solicitud",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente de An√°lisis T√©cnico": {
      "main": [
        [
          {
            "node": "Guardar Solicitud Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "097aa3d1-daac-4db5-80c8-ae4109becd24",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7d7bf67ab2f1532bb720b0269d9db4ba5e7c3188605719051a55b86973397668"
  },
  "id": "zwMR9u3qsq8NTIJJ",
  "tags": []
}