{
  "name": "InsightAgent Final",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/insightbot/chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        48,
        352
      ],
      "id": "20fbb2ad-7fd3-404d-92fc-1dc30ec432ea",
      "name": "Webhook",
      "webhookId": "0792d269-c91d-44d4-999c-ebfb4dd53f24"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"titulo_solicitud\": {\n      \"type\": \"string\",\n      \"description\": \"Título claro y descriptivo de la solicitud generado por IA.\"\n    },\n    \"problema_principal\": {\n      \"type\": \"string\",\n      \"description\": \"Descripción específica y sintetizada del problema tecnológico.\"\n    },\n    \"objetivo_esperado\": {\n      \"type\": \"string\",\n      \"description\": \"Resultado o beneficio que busca obtener el solicitante.\"\n    },\n    \"plataformas_involucradas\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" },\n      \"description\": \"Lista final de plataformas UTP involucradas.\"\n    },\n    \"beneficiarios\": {\n      \"type\": \"string\",\n      \"description\": \"Identificación de quiénes se beneficiarían de la solución.\"\n    },\n    \"frecuencia_uso\": {\n      \"type\": \"string\",\n      \"description\": \"Frecuencia con la que se usaría la solución. Debe ser uno de: 'diario', 'semanal', 'mensual', 'esporadico'.\"\n    },\n    \"plazo_deseado\": {\n      \"type\": \"string\",\n      \"description\": \"El plazo deseado expresado por el usuario (ej: 'en menos de un mes', 'de 1 a 3 meses'). El agente debe normalizarlo a uno de los valores siguientes: menos_1_mes, 1_a_3_meses, 3_a_6_meses, sin_definir.\"\n    },\n    \"departamento_solicitante\": {\n      \"type\": \"string\",\n      \"description\": \"Departamento o área del solicitante.\"\n    },\n    \"clasificacion_sugerida\": {\n      \"type\": \"string\",\n      \"description\": \"Clasificación final sugerida por la IA. Debe ser 'proyecto' o 'requerimiento'.\"\n    },\n    \"prioridad_sugerida\": {\n      \"type\": \"string\",\n      \"description\": \"Prioridad final sugerida por la IA. Debe ser 'P1', 'P2', 'P3' o 'P4'.\"\n    },\n    \"score_estimado\": {\n      \"type\": \"number\",\n      \"description\": \"El score final calculado que se te proporcionó como contexto.\"\n    },\n    \"resumen_ejecutivo\": {\n      \"type\": \"string\",\n      \"description\": \"Párrafo ejecutivo que resume el problema, la recomendación y la justificación para el líder GTTD.\"\n    }\n  },\n  \"required\": [\n    \"titulo_solicitud\", \"problema_principal\", \"objetivo_esperado\", \"plataformas_involucradas\",\n    \"beneficiarios\", \"frecuencia_uso\", \"urgencia\", \"departamento_solicitante\",\n    \"clasificacion_sugerida\", \"prioridad_sugerida\", \"score_estimado\", \"resumen_ejecutivo\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        5088,
        448
      ],
      "id": "a7b206c6-6ea4-4fa1-811c-458a39ba2c0f",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, GET, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        6480,
        208
      ],
      "id": "da5bf8e0-0203-4ce7-9fb6-0d97f367a191",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "url": "https://portal-innovacion-gttd.vercel.app/api/user/profile",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $json.body.user.auth_token}}"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=300"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 3
            }
          },
          "timeout": 5000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1232,
        624
      ],
      "id": "87a0aee1-228f-48ee-aef2-782c9095d866",
      "name": "User Profile Data"
    },
    {
      "parameters": {
        "jsCode": "// Combinar datos del webhook + perfil de usuario\nconst webhookData = $('Webhook').first().json;\nconst userProfile = $('User Profile Data').first().json;\n\n// Extraer datos importantes\nconst userMessage = webhookData.body.message;\nconst userContext = webhookData.body.context;\nconst userAuth = webhookData.body.user;\n\n// Crear objeto combinado optimizado\nconst combinedData = {\n  // Datos del usuario (ya obtenidos)\n  user_profile: {\n    user_id: userProfile.data.user_id,\n    name: userProfile.data.name,\n    department: userProfile.data.department,\n    role: userProfile.data.role,\n    email: userProfile.data.email,\n    area: userProfile.data.area\n  },\n  \n  // Datos del mensaje\n  user_query: userMessage,\n  user_context: userContext,\n  auth_token: userAuth.auth_token,\n  \n  // Timestamp para la sesión\n  timestamp: new Date().toISOString(),\n  \n  // Datos para queries SQL\n  sql_params: {\n    user_id: userProfile.user_id,\n    current_timestamp: new Date().toISOString()\n  }\n};\n\nreturn [{ json: combinedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1712,
        624
      ],
      "id": "000d4e8e-3ff0-4ae9-bea6-80ec5f3529ab",
      "name": "Combinar datos"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    session_id, \n    user_id, \n    current_stage, \n    conversation_data, \n    completeness_score, \n    status,\n    updated_at\nFROM public.session_states \n--WHERE user_id = '{{ $json.sql_params.user_id }}' \n  WHERE user_id = '{{ $('Webhook').item.json.body.user.user_id }}' AND status = 'active' \nORDER BY updated_at DESC \nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1920,
        624
      ],
      "id": "f053ed06-ee3a-431f-86da-40cfc2c0eee2",
      "name": "Verificar Sesiones",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "8f2cc774-c251-499f-8ca2-5c4344fd6485",
              "leftValue": "={{ $json}}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2128,
        608
      ],
      "id": "d7442b74-1922-4e95-a667-7db4c9c74d6d",
      "name": "¿Hay sesión activa?"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.session_states (\n  session_id,\n  user_id,\n  current_stage,\n  conversation_data,\n  completeness_score,\n  status,\n  created_at,\n  updated_at\n) VALUES (\n '{{ $('Webhook').item.json.body.session_id }}',\n  '{{ $('Webhook').item.json.body.user.user_id }}',\n  'start',\n  '{}'::jsonb,\n  0,\n  'active',\n  NOW(),\n  NOW()\n)\nON CONFLICT (session_id) DO UPDATE\n  SET updated_at = EXCLUDED.updated_at\nRETURNING\n  session_id,\n  user_id,\n  current_stage,\n  conversation_data,\n  completeness_score,\n  status,\n  created_at,\n  updated_at;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2416,
        736
      ],
      "id": "7071fa55-dd4f-4ea5-8312-b6bca29464bb",
      "name": "Crear sesión",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Código listo para pegar en un nodo Code de n8n llamado\n * \"Combinar datos de sesión\" (JavaScript).\n *\n * Integra:\n * - Lectura de \"Combinar datos\" (perfil + message)\n * - Detección de sesión existente y, si no, uso de \"Crear sesión\"\n * - Extracción y RESUMEN del historial (compacto y etiquetado)\n * - Construcción de classifierInput con history_summary (no envía historial crudo)\n *\n * Requisitos previos en el workflow:\n * - Nodo \"Combinar datos\" que produce:\n *    { user_profile: { user_id, name, department, role, ... }, user_query, user_context, ... }\n * - Nodo Postgres \"Verificar Sesiones\": entrega fila con session_id,... si existe\n * - Nodo Postgres \"Extraer historial de conversaciones\": SELECT role,message,agent_name,created_at ORDER BY created_at ASC\n * - Nodo Postgres \"Crear sesión\": en caso no exista (opcional según tu flujo)\n */\n\nconst combinedData = $('Combinar datos').first().json;\nlet sessionData = null;\nlet isExistingSession = false;\n\n// Internos para logs y DB (no enviar al LLM la lista cruda)\nlet conversationHistory = [];\nlet historyText = ''; // aquí quedará el resumen compacto para Prompt/Clasificador\n\nconsole.log('=== INICIANDO PROCESAMIENTO DE SESIÓN ===');\n\n// PASO 1: Intentar obtener sesión existente PRIMERO\ntry {\n  const existingSessionNode = $('Verificar Sesiones');\n  if (existingSessionNode && existingSessionNode.first) {\n    const existingData = existingSessionNode.first().json;\n\n    if (existingData && existingData.session_id) {\n      sessionData = existingData;\n      isExistingSession = true;\n\n      console.log('✅ Sesión existente encontrada:');\n      console.log('   - Session ID:', sessionData.session_id);\n      console.log('   - Datos completos:', JSON.stringify(sessionData, null, 2));\n\n      // PASO 1.1: Extraer historial SOLO para sesión existente y COMPRIMIRLO\n      try {\n        const historyNode = $('Extraer historial de conversaciones');\n        if (historyNode && historyNode.all) {\n          const historyData = historyNode.all();\n\n          if (Array.isArray(historyData) && historyData.length > 0) {\n            // Aplana a array de {role, message, agent_name, created_at}\n            conversationHistory = historyData.flatMap(item => item.json || []);\n\n            // Orden cronológico ascendente si el SQL no lo garantizara\n            conversationHistory.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n\n            // Toma últimos N mensajes (ajusta N según tu costo de tokens)\n            const last = conversationHistory.slice(-10);\n\n            // Limpieza por línea\n            const clean = (s) => String(s ?? '')\n              .replace(/\\s+/g, ' ')\n              .trim()\n              .slice(0, 240);\n\n            // Etiqueta: assistant usa agent_name si existe\n            const lines = last.map(m => {\n              const who = m.role === 'assistant'\n                ? (m.agent_name || 'assistant')\n                : (m.role || 'user');\n              return `${who}: ${clean(m.message)}`;\n            });\n\n            // Ensamblar resumen (usa '\\n' o ' | ')\n            const summary = lines.join('\\n');\n            historyText = `\\nResumen historial:\\n${summary}`;\n\n            console.log(`✅ Historial resumido: ${conversationHistory.length} mensajes (últimos ${last.length})`);\n          }\n        }\n      } catch (error) {\n        console.log('ℹ️ Error al procesar historial:', error.message);\n      }\n    } else {\n      console.log('ℹ️ Sesión existente está vacía o sin session_id');\n    }\n  } else {\n    console.log('ℹ️ Nodo \"Verificar Sesiones\" no disponible');\n  }\n} catch (error) {\n  console.log('ℹ️ Error al acceder a sesión existente:', error.message);\n}\n\n// PASO 2: Si NO hay sesión existente, usar datos de creación de sesión\nif (!sessionData) {\n  console.log('🔄 No hay sesión existente, buscando nueva sesión...');\n  try {\n    const newSessionNode = $('Crear sesión');\n    if (newSessionNode && newSessionNode.first) {\n      const rawData = newSessionNode.first().json;\n      console.log('🔍 DEBUG - Datos crudos de Crear sesión:');\n      console.log('   - Tipo:', typeof rawData);\n      console.log('   - Es array:', Array.isArray(rawData));\n      console.log('   - Contenido:', JSON.stringify(rawData, null, 2));\n\n      if (Array.isArray(rawData) && rawData.length > 0) {\n        sessionData = rawData[0];\n        isExistingSession = false;\n        console.log('✅ Nueva sesión extraída del array:', sessionData.session_id);\n      } else if (rawData && rawData.session_id) {\n        sessionData = rawData;\n        isExistingSession = false;\n        console.log('✅ Nueva sesión como objeto directo:', sessionData.session_id);\n      } else {\n        console.log('⚠️ Formato inesperado de sesión nueva:', rawData);\n      }\n    } else {\n      console.log('⚠️ Nodo \"Crear sesión\" no disponible');\n    }\n  } catch (error) {\n    console.log('❌ Error al acceder a nueva sesión:', error.message);\n    try {\n      console.log('🔄 Intentando método alternativo con .all()...');\n      const allNewSessions = $('Crear sesión').all();\n      console.log('   - Cantidad de elementos:', allNewSessions.length);\n\n      if (allNewSessions.length > 0) {\n        const firstSession = allNewSessions[0].json;\n        console.log('   - Primer elemento:', JSON.stringify(firstSession, null, 2));\n\n        if (Array.isArray(firstSession) && firstSession.length > 0) {\n          sessionData = firstSession[0];\n          console.log('✅ Sesión del array alternativo:', sessionData.session_id);\n        } else if (firstSession && firstSession.session_id) {\n          sessionData = firstSession;\n          console.log('✅ Sesión objeto alternativo:', sessionData.session_id);\n        }\n\n        if (sessionData) isExistingSession = false;\n      }\n    } catch (altError) {\n      console.log('❌ Método alternativo también falló:', altError.message);\n    }\n  }\n}\n\n// PASO 3: Validación final y fallback\nif (!sessionData || !sessionData.session_id) {\n  console.log('⚠️ FALLBACK: Creando sesión temporal');\n  console.log('   - sessionData actual:', sessionData);\n\n  sessionData = {\n    session_id: 'temp-' + Date.now(),\n    user_id: combinedData.user_profile?.user_id || 'demo_user',\n    current_stage: 'start',\n    completeness_score: 0,\n    conversation_data: {},\n    status: 'active'\n  };\n  isExistingSession = false;\n  console.log('🔄 Sesión temporal creada:', sessionData.session_id);\n}\n\n// PASO 4: Extraer datos finales\nconst currentStage = sessionData.current_stage || sessionData.current_step || (isExistingSession ? 'discovery' : 'start');\nconst completenessScore = sessionData.completeness_score || sessionData.completeness || 0;\nconst sessionStatus = sessionData.status || 'active';\nconst conversationData = sessionData.conversation_data || sessionData.data || {};\n\n// 🔍 VALIDACIÓN FINAL\nconsole.log('🎯 SESIÓN FINAL SELECCIONADA:');\nconsole.log('   - Tipo:', isExistingSession ? 'EXISTENTE' : 'NUEVA');\nconsole.log('   - Session ID:', sessionData.session_id);\nconsole.log('   - User ID:', sessionData.user_id);\nconsole.log('   - Stage:', currentStage);\nconsole.log('   - Completeness:', completenessScore);\nconsole.log('   - Status:', sessionStatus);\nconsole.log('   - Historial total (para DB/auditoría):', conversationHistory.length);\n\n// PASO 5: Crear input para Text Classifier (usa resumen, NO historial crudo)\nconst classifierInput = {\n  session_id: sessionData.session_id,\n\n  text: `Usuario: ${combinedData.user_profile?.name || 'Usuario'} (${combinedData.user_profile?.department || 'Sin departamento'})\nMensaje: ${combinedData.user_query}\nSession ID: ${sessionData.session_id}\nEtapa actual: ${currentStage}\nCompletitud: ${completenessScore}%\nEstado: ${sessionStatus}\nTipo de sesión: ${isExistingSession ? 'Continuación' : 'Nueva'}${historyText}`,\n\n  session_data: {\n    session_id: sessionData.session_id,\n    user_query: combinedData.user_query,\n    current_step: currentStage,\n    user_profile: combinedData.user_profile || {},\n    completeness_score: completenessScore,\n    conversation_data: conversationData,\n    user_context: combinedData.user_context || {},\n\n    // Enviar SOLO el resumen al resto del flujo/LLM:\n    history_summary: (historyText || '').replace(/^\\nResumen historial:\\n/, ''),\n\n    // No enviar conversation_history al LLM; si lo necesitas para inserts en BD,\n    // consérvalo en memoria y úsalo en los nodos de escritura a DB.\n    is_existing_session: isExistingSession\n  },\n\n  user_id: sessionData.user_id || combinedData.user_profile?.user_id,\n  current_stage: currentStage,\n  is_existing_session: isExistingSession\n};\n\nconsole.log('🚀 ENVIANDO AL TEXT CLASSIFIER:');\nconsole.log('   - Session ID confirmado:', classifierInput.session_id);\nconsole.log('   - Tipo de sesión:', isExistingSession ? 'EXISTENTE' : 'NUEVA');\n\nreturn [{ json: classifierInput }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        592
      ],
      "id": "230c983e-e8da-4eda-a6d1-7646ce275f68",
      "name": "Combinar datos de sesión"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, message, agent_name, created_at \nFROM public.conversation_messages \nWHERE session_id = '{{ $json.session_id }}'\nORDER BY created_at ASC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2432,
        496
      ],
      "id": "7c854595-b98f-4e9f-81e9-061d386b7a12",
      "name": "Extraer historial de conversaciones",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "truncate public.session_states cascade;\nselect * from public.session_states;\nselect * from public.conversation_messages\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -368,
        256
      ],
      "id": "8cc7a754-0481-40ad-9459-1bdb94dcfbe5",
      "name": "borrar todo",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# CONTEXTO PARA TU PRÓXIMA PREGUNTA\n\n## Perfil del Solicitante:\n- Nombre: {{ String($('Combinar datos de sesión').item.json.session_data?.user_profile?.name || '') }}\n\n- Departamento: {{ String($('Combinar datos de sesión').item.json.session_data?.user_profile?.department || '') }}\n\n- Rol: {{ String($('Combinar datos de sesión').item.json.session_data?.user_profile?.role || '') }}\n\n\n## Historial de la Conversación (Resumen):\n{{ JSON.stringify($('Combinar datos de sesión').item.json.session_data?.history_summary || '', null, 0) }}\n\n## Último Mensaje del Usuario:\n{{ String($('Combinar datos de sesión').item.json.session_data?.user_query || '') }}\n\n---\nBasado en este contexto, formula la siguiente pregunta que harías para avanzar en el descubrimiento de la solicitud.\n",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "==# SYSTEM PROMPT - AGENTE DE CONVERSACIÓN DISCOVERY \n\n## 1. TU IDENTIDAD Y MISIÓN\nEres InsightBot, un asistente de descubrimiento conversacional experto del Portal de Innovación GTTD de la UTP. Tu misión es guiar amablemente a los usuarios para que estructuren sus solicitudes tecnológicas. Tu objetivo NO es resolver el problema, sino CLARIFICARLO mediante una conversación natural.\n\n## 2. TUS DOS TAREAS PRINCIPALES\nEn cada turno, debes realizar dos acciones en este orden:\n\n1.  **EXTRAER**: Analiza el último mensaje del usuario y el historial de conversación, luego extrae textualmente cualquier información que corresponda a los campos de descubrimiento. No inventes ni normalices nada, solo extrae lo que el usuario dijo.\n2.  **PREGUNTAR**: Basado en la información que AÚN FALTA, formula la siguiente pregunta lógica para avanzar en la conversación.\n\n## 3. EL PROCESO DE DESCUBRIMIENTO (Los Campos Clave a Rellenar)\nTu objetivo es obtener información para los siguientes campos. Usa esta lista para guiar tu lógica de preguntas:\n\n-   `problema_principal`: ¿Cuál es el dolor o la necesidad específica?\n-   `objetivo_esperado`: ¿Cómo se ve el éxito para el usuario? ¿Qué resultado tangible busca?\n-   `beneficiarios`: ¿Quiénes (roles, departamentos) y cuántas personas se ven afectadas o beneficiadas?\n-   `plataformas_involucradas`: ¿Qué sistemas de la UTP están relacionados? (Canvas, SAP, PeopleSoft, etc.)\n-   `frecuencia_uso`: ¿Con qué frecuencia se usaría la solución? (diaria, semanal, mensual)\n-   `plazo_deseado`: ¿En cuánto tiempo se esperan ver los primeros resultados?\n-   `departamento_solicitante`: El área del usuario (generalmente ya viene en el perfil).\n\n## 4. TU LÓGICA DE DECISIÓN (Cómo elegir la siguiente pregunta)\nAnaliza el historial y el último mensaje para identificar el campo más importante que falta, y luego haz una pregunta específica sobre él.\n\n-   **SI el `problema_principal` u `objetivo_esperado` no están claros**: Pregunta para profundizar en el dolor o el resultado ideal.\n    -   *Ejemplo: \"Ok, la plataforma está lenta. Si funcionara perfectamente, ¿qué te permitiría hacer que ahora no puedes?\"*\n-   **SI los `beneficiarios` o `plataformas_involucradas` no están claros**: Pregunta por el alcance o los sistemas.\n    -   *Ejemplo: \"¡Gracias por el detalle! Para entender la magnitud, ¿a cuántos estudiantes o profesores afectaría esta mejora?\"*\n-   **SI todo lo anterior está cubierto**: Pregunta por `frecuencia_uso` o `plazo_deseado`.\n    -   *Ejemplo: \"Esto suena muy útil. Para planificarlo bien, ¿en cuánto tiempo te gustaría empezar a ver los primeros resultados?  Podría ser en menos de un mes, de 1 a 3 meses, o más adelante.\"*\n\n## 5. ADAPTACIÓN AL USUARIO (Personalización)\nAjusta tus preguntas según el rol y departamento del usuario para demostrar que entiendes su contexto.\n\n## 6. REGLAS DE ORO Y FORMATO DE SALIDA\n-   **UNA PREGUNTA A LA VEZ**: Tu `next_question` debe ser siempre una sola pregunta.\n-   **SÉ BREVE Y DIRECTO**: Ve al grano.\n-   **MANTÉN EL TONO COLOQUIAL Y AMIGABLE**.\n-   **FORMATO DE SALIDA OBLIGATORIO**: Responde SIEMPRE con un objeto JSON que contenga TRES campos:\n    - `next_question`: Un string con la siguiente pregunta para el usuario.\n    - `extracted_data`: Un objeto con los campos que pudiste extraer.\n    - `is_discovery_complete`: Un booleano. Ponlo en `true` SOLO si crees que ya tienes información para TODOS los 6 campos clave del descubrimiento.\n\n## 7. CRITERIO DE COMPLETITUD (`is_discovery_complete`)\nSolo debes poner `is_discovery_complete` en `true` si estás **absolutamente seguro** de tener una respuesta clara y explícita para **CADA UNO** de los 6 campos clave. Si es así, solo genera el booleano, no generes un `next_question`.\n- **Revisa tu trabajo**: Antes de poner `true`, pregúntate a ti mismo: \"¿Tengo una descripción clara del problema? ¿Sé exactamente quiénes son los beneficiarios y cuántos son? ¿Conozco el objetivo final?\".\n- **En caso de duda, pregunta**: Si un campo está implícito pero no explícito, es mejor hacer una pregunta más para confirmar.\n- Si es así, solo genera el booleano, no generes un next_question",
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        3120,
        592
      ],
      "id": "05726e09-de40-4af0-82ff-3006f182f7a1",
      "name": "Agente Descubridor de necesidades"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.session_states\nSET\n  completeness_score = {{ $('Calculando Nuevo Score').first().json.total_score }},\n  conversation_data = conversation_data || '{{ JSON.stringify($('Normalizador de Datos').first().json.output) }}'::jsonb,\n  current_stage = 'summary', -- ¡Cambiamos la etapa!\n  updated_at = NOW()\nWHERE\n  session_id = '{{ $('Combinar datos de sesión').first().json.session_data.session_id }}';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4656,
        208
      ],
      "id": "0b7b0f79-f359-4dff-98be-5f624391dfae",
      "name": "Actualizar estado de la sesión",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_active_scoring_config();\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1488,
        624
      ],
      "id": "b6b2ada0-9e73-4c73-9d4d-5f04398016ed",
      "name": "Obtener configuraciones",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"next_question\": {\n      \"type\": \"string\",\n      \"description\": \"La siguiente pregunta clara, breve y amigable para el usuario, formulada para obtener la información que falta.\"\n    },\n    \"extracted_data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"problema_principal\": {\n          \"type\": \"string\",\n          \"description\": \"El problema o necesidad principal extraído textualmente del último mensaje del usuario.\"\n        },\n        \"objetivo_esperado\": {\n          \"type\": \"string\",\n          \"description\": \"El resultado o meta que el usuario mencionó en su último mensaje.\"\n        },\n        \"plataformas_involucradas\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Lista de plataformas o sistemas que el usuario mencionó explícitamente.\"\n        },\n        \"beneficiarios\": {\n          \"type\": \"string\",\n          \"description\": \"Las personas o roles que el usuario identificó como beneficiarios.\"\n        },\n        \"frecuencia_uso\": {\n          \"type\": \"string\",\n          \"description\": \"La frecuencia de uso mencionada por el usuario (ej: 'todos los días', 'una vez al mes').\"\n        },\n        \"plazo_deseado\": {\n          \"type\": \"string\",\n          \"description\": \"El plazo deseado expresado por el usuario (ej: 'en menos de un mes', 'de 1 a 3 meses'). El agente debe normalizarlo a uno de los valores siguientes: menos_1_mes, 1_a_3_meses, 3_a_6_meses, sin_definir.\"\n        }\n      },\n      \"description\": \"Un objeto que contiene ÚNICAMENTE la información nueva extraída del último mensaje del usuario. Si no se extrajo información para un campo, este debe ser omitido.\"\n    },\n    \"is_discovery_complete\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"next_question\",\n    \"extracted_data\",\n    \"is_discovery_complete\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3312,
        800
      ],
      "id": "4cba2675-e026-40ae-890f-156a87e6265c",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"plataformas_involucradas\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"departamento_solicitante\": { \"type\": \"string\" },\n    \"frecuencia_uso\": { \"type\": \"string\" },\n    \"plazo_deseado\": { \"type\": \"string\" },\n    \"problema_principal\": { \"type\": \"string\" },\n    \"objetivo_esperado\": { \"type\": \"string\" },\n    \"beneficiarios\": { \"type\": \"string\" }\n  },\n  \"description\": \"Objeto con los datos normalizados.\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        4000,
        384
      ],
      "id": "e299b0c0-764a-4ecc-b6c9-9f84a7fa6632",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Normaliza este JSON:\n{{ JSON.stringify($('Agente Descubridor de necesidades').first().json.output.extracted_data) }}\n\n# Usa estas reglas:\n- plataformas_involucradas: {{ JSON.stringify($('Obtener configuraciones').first().json.get_active_scoring_config.valid_enums.plataformas_involucradas) }}\n- departamento_solicitante: {{ JSON.stringify($('Obtener configuraciones').first().json.get_active_scoring_config.valid_enums.departamento_solicitante) }}\n- frecuencia_uso: {{ JSON.stringify($('Obtener configuraciones').first().json.get_active_scoring_config.valid_enums.frecuencia_uso) }}\n- plazo_deseado:\n- Si contiene \"menos de un mes\" o \"inmediato\" -> \"menos_1_mes\"\n- Si contiene \"1 a 3 meses\" -> \"1_a_3_meses\"\n- Si contiene \"3 a 6 meses\" -> \"3_a_6_meses\"\n- Si no está definido o no es claro -> \"sin_definir\"\n\n\n# Responde solo con el JSON normalizado. Omite campos que no puedas mapear.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un asistente de normalización de datos altamente preciso. Tu única tarea es tomar un objeto JSON con datos en lenguaje natural y convertir sus valores a un formato estricto predefinido. Si un valor no se puede mapear claramente, déjalo como `null`. No inventes información."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3808,
        208
      ],
      "id": "d61ed87c-1456-49b7-9c57-dae10e0fcb41",
      "name": "Normalizador de Datos"
    },
    {
      "parameters": {
        "jsCode": "// 1. Plantilla con todos los campos requeridos por la API\nconst apiTemplate = {\n  problema_principal: null, objetivo_esperado: null,\n  plataformas_involucradas: [], beneficiarios: null,\n  frecuencia_uso: null, plazo_deseado: null,\n  departamento_solicitante: null\n};\n\n// 2. Cargar la memoria de la sesión\nconst sessionMemoryRaw = $('Combinar datos de sesión').first().json.session_data.conversation_data || {};\n\n// 3. LIMPIEZA: Crear una versión limpia de la memoria,\n//    conteniendo solo las claves que nos interesan.\nconst sessionMemoryClean = {};\nfor (const key in apiTemplate) {\n  if (sessionMemoryRaw.hasOwnProperty(key)) {\n    sessionMemoryClean[key] = sessionMemoryRaw[key];\n  }\n}\n\n// 4. Cargar los datos recién normalizados de este turno\nconst normalizedData = $('Normalizador de Datos').first().json.output;\n\n// 5. Fusionar todo en orden.\nconst finalRequestData = { ...apiTemplate, ...sessionMemoryClean, ...normalizedData };\n\n// Devolver el payload final para la API\nreturn { request: finalRequestData };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4208,
        208
      ],
      "id": "49c0d28d-90b3-4a8e-b170-3ce672c1c803",
      "name": "Preparar Cuerpo para Scoring"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "524b0ea0-6d57-45d4-820b-f25fdeee6fa0",
              "name": "response_type",
              "value": "validation_summary",
              "type": "string"
            },
            {
              "id": "2013607d-83eb-4c20-91d8-03aeb165cfe0",
              "name": "summary",
              "value": "={{ $('Agente de Análisis Final').first().json.output }}",
              "type": "object"
            },
            {
              "id": "bf352cbc-4cef-465f-959a-62b99bc91859",
              "name": "session_id",
              "value": "={{ $('Combinar datos de sesión').first().json.session_id }}",
              "type": "string"
            },
            {
              "id": "8d09a1ab-0760-4b27-93fb-7b2a8324dde9",
              "name": "text",
              "value": "He recopilado la siguiente información. Por favor, confirma si es correcta para poder continuar.",
              "type": "string"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6240,
        208
      ],
      "id": "87e3ba8e-073f-4967-900a-1f6953e822d5",
      "name": "Construir respuesta para frontend"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://portal-innovacion-gttd.vercel.app/api/analysis/simple-calculate",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4416,
        208
      ],
      "id": "ba287af2-1711-4b90-8a30-9af3c9cac27d",
      "name": "Calculando Nuevo Score"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.is_discovery_complete }}",
                    "rightValue": "=",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "8e065d25-3b61-4999-8516-bbf30b5f6749"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Descubrimiento Completo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a27d999-f012-4ae8-98c3-d908c51cf9ee",
                    "leftValue": "={{ $json.output.is_discovery_complete }}",
                    "rightValue": "={{ $json.output.is_discovery_complete }}",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Seguir descubriendo"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3536,
        528
      ],
      "id": "d5e765f6-5816-4549-9890-848261533659",
      "name": "¿Descubrimiento Completo?"
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, GET, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        4032,
        624
      ],
      "id": "a2be7ccc-49ba-42e3-b429-336b99e0f4a8",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.conversation_messages\n  (message_id, session_id, role, message, agent_name, created_at)\nVALUES\n  (\n    gen_random_uuid(),\n    '{{ $('Construir respuesta para frontend1').first().json.session_id }}',\n    'assistant',\n    '{{ $('Construir respuesta para frontend1').first().json.text }}',\n    'discovery_agent',\n    NOW()\n  );\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4256,
        624
      ],
      "id": "410c4c36-0665-41d5-a671-a52e7bb9aa13",
      "name": "Guardar mensaje del asistente en conversaciones1",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.session_states\nSET\n   -- Usamos el operador || para fusionar el JSON existente con el nuevo\n    conversation_data = conversation_data || '{{ JSON.stringify($('Agente Descubridor de necesidades').first().json.output.extracted_data) }}'::jsonb,\n  current_stage = 'discovery',\n  updated_at = NOW()\nWHERE\n  session_id = '{{ $('Combinar datos de sesión').first().json.session_data.session_id }}';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4480,
        624
      ],
      "id": "642a989b-c90c-4d0a-9587-040a8ddac19f",
      "name": "Actualizar estado de la sesión1",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "524b0ea0-6d57-45d4-820b-f25fdeee6fa0",
              "name": "response_type",
              "value": "text",
              "type": "string"
            },
            {
              "id": "2013607d-83eb-4c20-91d8-03aeb165cfe0",
              "name": "text",
              "value": "={{ $('Agente Descubridor de necesidades').first().json.output.next_question }}",
              "type": "string"
            },
            {
              "id": "bf352cbc-4cef-465f-959a-62b99bc91859",
              "name": "session_id",
              "value": "={{ $('Combinar datos de sesión').first().json.session_data.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3824,
        624
      ],
      "id": "7239bba2-1475-405f-b494-5bd1e3823e3b",
      "name": "Construir respuesta para frontend1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.conversation_messages\n  (message_id, session_id, role, message, agent_name, created_at)\nVALUES\n  (\n    gen_random_uuid(),\n    '{{ $('Combinar datos de sesión').first().json.session_id }}',\n    'assistant',\n    -- CORRECCIÓN: Usamos .replace() para escapar las comillas simples\n    '{{ $('Agente de Análisis Final').first().json.output.resumen_ejecutivo.replace(/'/g, \"''\") }}',\n    'summary_agent',\n    NOW()\n  );\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5296,
        208
      ],
      "id": "8e096068-01e0-424e-a2d8-e8bda4dd458b",
      "name": "Guardar mensaje de resumen",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# CONTEXTO COMPLETO PARA ANÁLISIS Y SÍNTESIS FINAL\n\n## 1. Perfil del Solicitante\n- **Nombre**: {{ JSON.stringify($('Combinar datos de sesión').first().json.session_data.user_profile.name) }}\n- **Departamento**: {{ JSON.stringify($('Combinar datos de sesión').first().json.session_data.user_profile.department) }}\n- **Rol**: {{ JSON.stringify($('Combinar datos de sesión').first().json.session_data.user_profile.role) }}\n\n## 2. Score Final Calculado\n- **Score**: {{ JSON.stringify($('Calculando Nuevo Score').first().json.total_score) }}\n- **Clasificación Sugerida (por algoritmo)**: {{ JSON.stringify($('Calculando Nuevo Score').first().json.classification) }}\n- **Prioridad Sugerida (por algoritmo)**: {{ JSON.stringify($('Calculando Nuevo Score').first().json.priority) }}\n\n## 3. Historial Completo de la Conversación\n{{ JSON.stringify($('Combinar datos de sesión').first().json.session_data.history_summary) }}\n\n## 4. Datos Acumulados y Normalizados\n{{ JSON.stringify($('Normalizador de Datos').first().json.output) }}\n\n---\n## INSTRUCCIÓN:\nAnaliza toda la información proporcionada y genera el **Informe Técnico Final** estructurado. Asegúrate de que el `resumen_ejecutivo` sea claro y ofrezca una recomendación.\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# SYSTEM PROMPT - AGENTE DE ANÁLISIS FINAL (v3.0)\n\n## 1. TU IDENTIDAD Y MISIÓN\nEres InsightBot en modo **Analista Experto**. Tu única misión es tomar el historial de una conversación y los datos ya recopilados para generar un **Informe Técnico Final** estructurado y preciso. Tu audiencia son los líderes de la GTTD, por lo que tu lenguaje debe ser profesional, claro y orientado a la toma de decisiones.\n\n## 2. CONTEXTO DE NEGOCIO (Configuración Activa del Sistema)\nDebes usar las siguientes reglas de negocio, obtenidas de la configuración activa del sistema, para justificar tus conclusiones en el `resumen_ejecutivo`.\n\n- Un requerimiento se clasifica como **\"proyecto\"** si su score final es >= **{{ $('Obtener configuraciones').first().json.get_active_scoring_config.classification_thresholds.project_min_score }}**.\n- Una prioridad **\"P1\"** se asigna si el score final es >= **{{ $('Obtener configuraciones').first().json.get_active_scoring_config.classification_thresholds.priority_p1_min }}**.\n- El departamento del solicitante, **'{{ $('Combinar datos de sesión').first().json.session_data.user_profile.department }}'**, tiene un peso de importancia de **{{ $('Obtener configuraciones').first().json.get_active_scoring_config.department_weights[$('Combinar datos de sesión').first().json.session_data.user_profile.department] || 1.0 }}**.\n\n## 3. REGLAS DE PROCESAMIENTO\n- **Síntesis, no repetición**: No copies y pegues el historial. Sintetiza la información en los campos correspondientes.\n- **Inferencia Profesional**: Usa tu conocimiento del contexto UTP (Canvas, SAP, etc.) para enriquecer el análisis.\n- **`resumen_ejecutivo`**: Este es el campo más importante. Debe ser un párrafo conciso que resuma el problema, el objetivo y una recomendación clara para el líder.\n- **`score_estimado`**: Usa el score final calculado que se te proporciona como contexto. No lo inventes.\n\n## 4. FORMATO DE SALIDA OBLIGATORIO\nResponde SIEMPRE y ÚNICAMENTE con el objeto JSON definido en el Output Parser. No incluyas texto adicional antes o después del JSON.\n",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        4896,
        208
      ],
      "id": "e4d63eb8-9b9c-4fe2-b396-f2cd7e7f7820",
      "name": "Agente de Análisis Final"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.conversation_messages\n  (message_id, session_id, role, message, created_at)\nVALUES\n  (\n    gen_random_uuid(),\n    '{{ $json.session_id }}',\n    'user',\n    '{{ $json.session_data.user_query }}',\n    NOW()\n  );\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2928,
        592
      ],
      "id": "99a8c44f-7374-4a1a-99da-11e94b9b4f2a",
      "name": "Guardando mensaje del usuario",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.body.event.type}}",
                    "rightValue": "SUMMARY_CONFIRMED",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e4f77c9b-02ae-4632-a1c1-14ba77c5522b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Finalización de solicitud"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "28914cff-d332-4efc-b073-050e66a9324b",
                    "leftValue": "={{$json.body.event.type}}",
                    "rightValue": "N8N_VALIDATION",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Flujo normal"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        544,
        352
      ],
      "id": "d2d407e9-3e57-4426-b84c-26bad314a8c8",
      "name": "Router Principal de Eventos"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM public.session_states\nWHERE session_id = '{{$json.body.session_id}}' ",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1008,
        96
      ],
      "id": "c8e230dd-7bc1-43f9-b8c6-4d74aec6b30c",
      "name": "Obtener Sesión para Finalizar",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.requests\nSET\n  technical_analysis = '{{JSON.stringify($json.output)}}'::jsonb\nWHERE id = '{{$(\"Insertar Request con pendiente de análisis técnico\").first().json.id}}'\nRETURNING id;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2720,
        96
      ],
      "id": "1cfebc9c-6527-4995-897c-95d2b0a9fec2",
      "name": "Guardar Solicitud Final",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.session_states\nSET status = 'completed', updated_at = NOW()\nWHERE session_id = '{{ $('Code').item.json.clean.session_id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3008,
        96
      ],
      "id": "298d818a-f098-4394-ae8f-e982078ee1b1",
      "name": "Cerrar Sesión",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f17fefb5-ccce-4283-b515-b159558d4f49",
              "name": "response_type",
              "value": "text",
              "type": "string"
            },
            {
              "id": "5562bb5f-55c1-4edf-9a9d-74f3f8861baa",
              "name": "text",
              "value": "=¡Listo! Tu solicitud ha sido enviada con el folio #{{ $('Guardar Solicitud Final').first().json.id }}",
              "type": "string"
            },
            {
              "id": "0996875e-04cb-4cc0-8396-e878d5b6a0f4",
              "name": "session_id",
              "value": "={{ $('Code').item.json.clean.session_id }}",
              "type": "string"
            },
            {
              "id": "66cdba5c-11fa-4c76-bdb1-e32a9b38c559",
              "name": "request_id",
              "value": "={{ $('Guardar Solicitud Final').first().json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3280,
        96
      ],
      "id": "8fafb55f-1568-47d2-a7e8-19d52c74939a",
      "name": "Construir Respuesta Final"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        3552,
        96
      ],
      "id": "d09a7123-ab5d-4b9f-ba8b-6410e6f8d4ec",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"analysis_input\": {\n    \"titulo\": \"{{$('Code').item.json.clean.titulo_solicitud}}\",\n    \"problema\": \"{{$('Code').item.json.clean.problema_principal}}\",\n    \"objetivo\": \"{{$('Code').item.json.clean.objetivo_esperado}}\",\n    \"plataformas\": {{$('Code').item.json.clean.plataformas_involucradas || []}},\n    \"frecuencia\": \"{{$('Code').item.json.clean.frecuencia_uso}}\",\n    \"departamento\": \"{{$('Code').item.json.clean.departamento_solicitante}}\",\n    \"clasificacion_sugerida\": \"{{$('Code').item.json.clean.clasificacion_sugerida}}\",\n    \"prioridad_sugerida\": \"{{$('Code').item.json.clean.prioridad_sugerida}}\",\n    \"score_estimado\": {{$('Code').item.json.clean.score_estimado || 0}},\n    \"session_id\": \"{{$('Code').item.json.clean.session_id}}\",\n    \"user_id\": \"{{$('Code').item.json.clean.user_id}}\"\n  }\n}",
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1872,
        112
      ],
      "id": "71ecc004-302a-4d3f-a3e7-a52d4886487e",
      "name": "Resumen de solicitud"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"affected_systems\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"integration_points\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"dependencies\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"estimated_effort\": { \"type\": \"string\" },\n    \"data_sensitivity\": { \"type\": \"string\" },\n    \"security_implications\": { \"type\": \"string\" },\n    \"compliance_flags\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"recommended_architecture\": { \"type\": \"string\" },\n    \"data_sources_detected\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"suggested_envs\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"suggested_owners\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"risk_items\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n  },\n  \"required\": [\n    \"affected_systems\",\"integration_points\",\"dependencies\",\n    \"estimated_effort\",\"recommended_architecture\",\"risk_items\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2480,
        304
      ],
      "id": "d150e55d-bc28-43f0-b187-a1f09baae928",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.requests (\n  session_id, user_id, titulo_solicitud, problema_principal, objetivo_esperado,\n  beneficiarios, plataformas_involucradas, frecuencia_uso, plazo_deseado,\n  departamento_solicitante, score_estimado, clasificacion_sugerida, prioridad_sugerida, created_at, updated_at\n) VALUES (\n  {{ $json.quoted.session_id_q }},\n  {{ $json.quoted.user_id_q }},\n  {{ $json.quoted.titulo_solicitud_q }},\n  {{ $json.quoted.problema_principal_q }},\n  {{ $json.quoted.objetivo_esperado_q }},         -- <- NUEVO\n  {{ $json.quoted.beneficiarios_q }},\n  json_build_array({{ $json.quoted.plataformas_args }}),\n  {{ $json.quoted.frecuencia_uso_q }},\n  {{ $json.quoted.plazo_deseado_q }},\n  {{ $json.quoted.departamento_solicitante_q }},\n  {{ $json.quoted.score_n }},\n  {{ $json.quoted.clasificacion_sugerida_q }},\n  {{ $json.quoted.prioridad_sugerida_q }},\n  NOW(), NOW()\n)\nRETURNING id;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1568,
        96
      ],
      "id": "f95b422d-36bd-43bb-8265-5db95616d78d",
      "name": "Insertar Request con pendiente de análisis técnico",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.analysis_input}}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Eres Arquitecto Técnico de UTP. Tu salida debe ser EXCLUSIVAMENTE un JSON VÁLIDO que cumpla el esquema provisto. No incluyas texto extra. Analiza para uso interno del líder de dominio, no para el solicitante. Considera: sistemas/plataformas UTP, puntos de integración, dependencias, sensibilidad de datos, implicancias de seguridad, cumplimiento (privacidad/políticas UTP), esfuerzo estimado de alto nivel, riesgos, entornos recomendados (dev/test/prod), y equipos/roles sugeridos como owners. Si algo no aplica, devuelve [] o \"\" según corresponda. No inventes sistemas que no se puedan inferir del contexto.\n\nEsquema de salida: { \"affected_systems\": string[], \"integration_points\": string[], \"dependencies\": string[], \"estimated_effort\": string, \"data_sensitivity\": string, \"security_implications\": string, \"compliance_flags\": string[], \"recommended_architecture\": string, \"data_sources_detected\": string[], \"suggested_envs\": string[], \"suggested_owners\": string[], \"risk_items\": string[] }",
          "maxIterations": 3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        2288,
        96
      ],
      "id": "50472208-15da-4aca-a87b-712bb838c5d7",
      "name": "Agente de Análisis Técnico"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE public.session_states\nSET\n  conversation_data = $${{ JSON.stringify($json.conversation_data_obj) }}$$::jsonb,\n  updated_at = NOW()\nWHERE session_id = '{{ $json.session_id }}'\nRETURNING session_id, conversation_data;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5984,
        208
      ],
      "id": "5f5bbe08-cb0c-4bf3-9295-531ffaef13cd",
      "name": "Actualizar Sesión con Datos técnicos",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM public.session_states;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5536,
        208
      ],
      "id": "ccb6e9bd-17a4-437f-b374-309aa10494d0",
      "name": "Extraer info de sesion",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const sessionId = $('Combinar datos de sesión').first().json.session_id;\nconst output = $('Agente de Análisis Final').first().json.output || {};\nconst prev = $json.conversation_data || {};\n\nconst finalConversation = {\n  input_collected: prev.input_collected || prev || {},\n  analysis_final: output,\n  ui_summary: output.resumen_ejecutivo || ''\n};\n\nreturn [{ json: { session_id: sessionId, conversation_data_obj: finalConversation } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5744,
        208
      ],
      "id": "4797dcb8-64e1-4d39-8d5d-cd52f0c7a6d9",
      "name": "Formateando datos para sesión"
    },
    {
      "parameters": {
        "jsCode": "const cd = ($json.conversation_data && $json.conversation_data.analysis_final) || {};\nconst q = (v) => `'${String(v ?? '').replace(/'/g, \"''\")}'`;\nconst arrQ = (arr) => (arr ?? []).map(v => q(v)).join(', ');\n\n// Normaliza array de plataformas: acepta string o array\nlet plataformas = cd.plataformas_involucradas;\nif (typeof plataformas === 'string') {\n  // Puedes partir por coma si llega como string, o dejarlo como un solo elemento\n  plataformas = [plataformas];\n}\n\nreturn [{\n  json: {\n    // Limpios (para JSON/Set)\n    clean: {\n      session_id: $json.session_id,\n      user_id: $json.user_id,\n      titulo_solicitud: cd.titulo_solicitud || '',\n      problema_principal: cd.problema_principal || '',\n      objetivo_esperado: cd.objetivo_esperado || '',\n      beneficiarios: cd.beneficiarios || '',\n      plataformas_involucradas: Array.isArray(plataformas) ? plataformas : [],\n      frecuencia_uso: cd.frecuencia_uso || '',\n      plazo_deseado: cd.plazo_deseado || '',\n      departamento_solicitante: cd.departamento_solicitante || '',\n      score_estimado: Number(cd.score_estimado) || 0,\n      clasificacion_sugerida: cd.clasificacion_sugerida || '',\n      prioridad_sugerida: cd.prioridad_sugerida || '',\n    },\n\n    // Quoted (para INSERT con {{ $json.quoted.* }})\n    quoted: {\n      session_id_q: q($json.session_id),\n      user_id_q: q($json.user_id),\n      titulo_solicitud_q: q(cd.titulo_solicitud),\n      problema_principal_q: q(cd.problema_principal),\n      objetivo_esperado_q: q(cd.objetivo_esperado),\n      beneficiarios_q: q(cd.beneficiarios),\n      plataformas_args: arrQ(plataformas),\n      frecuencia_uso_q: q(cd.frecuencia_uso),\n      plazo_deseado_q: q(cd.plazo_deseado),\n      departamento_solicitante_q: q(cd.departamento_solicitante),\n      score_n: Number(cd.score_estimado) || 0,\n      clasificacion_sugerida_q: q(cd.clasificacion_sugerida),\n      prioridad_sugerida_q: q(cd.prioridad_sugerida),\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        96
      ],
      "id": "224640ce-69d2-4d1a-92b5-0df2785e4989",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM public.session_states",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -592,
        256
      ],
      "id": "61106a4a-4bd6-4a31-aeea-92ba318aa7b9",
      "name": "select todo",
      "credentials": {
        "postgres": {
          "id": "g5qGwPDZNE3RooY2",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-5-nano",
        "options": {
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1952,
        320
      ],
      "id": "e77f54ba-77b4-4e5c-8df6-bdff419f30f3",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "quh5eY45iVTnCNBy",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-5-nano",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3184,
        1024
      ],
      "id": "7968c972-c237-47e2-8189-ce9ece6d1221",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "quh5eY45iVTnCNBy",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-5-nano",
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3504,
        336
      ],
      "id": "99915a31-2d2c-4fc3-a2f9-146dd3ee90b4",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "quh5eY45iVTnCNBy",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-5-nano",
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        4688,
        432
      ],
      "id": "c89526c5-6cb6-4bda-a03a-6f5645c2d40f",
      "name": "OpenRouter Chat Model3",
      "credentials": {
        "openRouterApi": {
          "id": "quh5eY45iVTnCNBy",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.6
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2224,
        304
      ],
      "id": "c791d4bc-1259-414c-8d03-4718a9db47b7",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "4eLNx52o4tOkk7Wy",
          "name": "Google Gemini(PaLM) Api account alv"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.6
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3104,
        816
      ],
      "id": "9d8883af-7806-4afe-8715-a9a509727c95",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "4eLNx52o4tOkk7Wy",
          "name": "Google Gemini(PaLM) Api account alv"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3808,
        384
      ],
      "id": "efe326ee-4abe-4738-9053-2034659aca35",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "NzEbXS8BMBbIP70m",
          "name": "Google Gemini(PaLM) Api account 2 acege"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4896,
        480
      ],
      "id": "e97bf50d-9163-436d-8748-be5aca68c95a",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "NzEbXS8BMBbIP70m",
          "name": "Google Gemini(PaLM) Api account 2 acege"
        }
      }
    },
    {
      "parameters": {
        "url": "https://portal-innovacion-gttd.vercel.app/api/user/profile",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=utp-portal-local-session"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=300"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 3
            }
          },
          "timeout": 5000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        944,
        848
      ],
      "id": "e1182fde-7e8d-48e0-bc6b-63f6577713a3",
      "name": "User Profile Data1"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "utp-gttd.app.n8n.cloud",
            "user-agent": "node",
            "content-length": "358",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "accept-language": "*",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "44.192.49.223",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "96c6c62770497abe-IAD",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "sec-fetch-mode": "cors",
            "x-forwarded-for": "44.192.49.223, 104.23.213.14",
            "x-forwarded-host": "utp-gttd.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-26-7b6dc7c86c-ghjjl",
            "x-insight-event-type": "N8N_VALIDATION",
            "x-insight-source": "applicant_portal",
            "x-is-trusted": "yes",
            "x-real-ip": "44.192.49.223",
            "x-vercel-id": "gru1::r8w9n-1754737480684-ad95d04e9e38"
          },
          "params": {},
          "query": {},
          "body": {
            "message": "Cuanto antes, lo más pronto posible",
            "session_id": "9742680e-4970-41ac-bb0e-d6f57c0248b9",
            "event": {
              "type": "N8N_VALIDATION"
            },
            "event_type": "N8N_VALIDATION",
            "source": "applicant_portal",
            "debug": {
              "sent_at": "2025-08-09T11:04:40.809Z",
              "event_in_body": "N8N_VALIDATION"
            },
            "user": {
              "auth_token": "utp-portal-local-session",
              "user_id": "solicitante@utp.edu.pe"
            }
          },
          "webhookUrl": "https://utp-gttd.app.n8n.cloud/webhook/insightbot/chat",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Router Principal de Eventos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Agente de Análisis Final",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "User Profile Data": {
      "main": [
        [
          {
            "node": "Obtener configuraciones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combinar datos": {
      "main": [
        [
          {
            "node": "Verificar Sesiones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Sesiones": {
      "main": [
        [
          {
            "node": "¿Hay sesión activa?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Hay sesión activa?": {
      "main": [
        [
          {
            "node": "Extraer historial de conversaciones",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Crear sesión",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear sesión": {
      "main": [
        [
          {
            "node": "Combinar datos de sesión",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combinar datos de sesión": {
      "main": [
        [
          {
            "node": "Guardando mensaje del usuario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extraer historial de conversaciones": {
      "main": [
        [
          {
            "node": "Combinar datos de sesión",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente Descubridor de necesidades": {
      "main": [
        [
          {
            "node": "¿Descubrimiento Completo?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar estado de la sesión": {
      "main": [
        [
          {
            "node": "Agente de Análisis Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener configuraciones": {
      "main": [
        [
          {
            "node": "Combinar datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Agente Descubridor de necesidades",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Normalizador de Datos",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Normalizador de Datos": {
      "main": [
        [
          {
            "node": "Preparar Cuerpo para Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Cuerpo para Scoring": {
      "main": [
        [
          {
            "node": "Calculando Nuevo Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculando Nuevo Score": {
      "main": [
        [
          {
            "node": "Actualizar estado de la sesión",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir respuesta para frontend": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Descubrimiento Completo?": {
      "main": [
        [
          {
            "node": "Normalizador de Datos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Construir respuesta para frontend1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook1": {
      "main": [
        [
          {
            "node": "Guardar mensaje del asistente en conversaciones1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar mensaje del asistente en conversaciones1": {
      "main": [
        [
          {
            "node": "Actualizar estado de la sesión1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir respuesta para frontend1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar mensaje de resumen": {
      "main": [
        [
          {
            "node": "Extraer info de sesion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente de Análisis Final": {
      "main": [
        [
          {
            "node": "Guardar mensaje de resumen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardando mensaje del usuario": {
      "main": [
        [
          {
            "node": "Agente Descubridor de necesidades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Router Principal de Eventos": {
      "main": [
        [
          {
            "node": "Obtener Sesión para Finalizar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "User Profile Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Sesión para Finalizar": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar Solicitud Final": {
      "main": [
        [
          {
            "node": "Cerrar Sesión",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cerrar Sesión": {
      "main": [
        [
          {
            "node": "Construir Respuesta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir Respuesta Final": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resumen de solicitud": {
      "main": [
        [
          {
            "node": "Agente de Análisis Técnico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Agente de Análisis Técnico",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Insertar Request con pendiente de análisis técnico": {
      "main": [
        [
          {
            "node": "Resumen de solicitud",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente de Análisis Técnico": {
      "main": [
        [
          {
            "node": "Guardar Solicitud Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar Sesión con Datos técnicos": {
      "main": [
        [
          {
            "node": "Construir respuesta para frontend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extraer info de sesion": {
      "main": [
        [
          {
            "node": "Formateando datos para sesión",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formateando datos para sesión": {
      "main": [
        [
          {
            "node": "Actualizar Sesión con Datos técnicos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Insertar Request con pendiente de análisis técnico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Agente Descubridor de necesidades",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        []
      ]
    },
    "OpenRouter Chat Model3": {
      "ai_languageModel": [
        []
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agente de Análisis Técnico",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Agente Descubridor de necesidades",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Normalizador de Datos",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Agente de Análisis Final",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ab8048ba-afe3-4cbf-8988-245e90312570",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bcfa0b2b4672bb60d853d9c04e731529ff9ff6bb51ba2aaf99b84801725027cf"
  },
  "id": "vqddRp6bJxmybEI4",
  "tags": []
}