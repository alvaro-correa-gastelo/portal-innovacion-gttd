# ARCHIVO .ENV PARA DOCKER COMPOSE
# Copiar a .env y configurar valores reales

# ===============================================
# CONFIGURACIÓN DE POSTGRESQL
# ===============================================
POSTGRES_USER=postgres
POSTGRES_PASSWORD=UNA_CONTRASENA_FUERTE_PARA_POSTGRES
POSTGRES_DB=postgres

# ===============================================
# CONFIGURACIÓN FRONTEND / PROXY
# ===============================================
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
NEXT_PUBLIC_N8N_WEBHOOK_URL=

# Demo mode flags (frontend/backend)
NEXT_PUBLIC_DEMO_MODE=false
DEMO_MODE=false

# Proxy hacia n8n (usar el POST del webhook)
N8N_WEBHOOK_URL=
WEBHOOK_SECRET=
DEMO_MAX_REQUESTS_PER_IP=30

# ===============================================
# CONFIGURACIÓN DE REDIS
# ===============================================
REDIS_PASSWORD=tu_redis_password_seguro

# ===============================================
# CONFIGURACIÓN DE N8N
# ===============================================
N8N_ENCRYPTION_KEY=tu_encryption_key_muy_seguro_de_32_caracteres

# ===============================================
# CONFIGURACIÓN DE CLOUDFLARE (OPCIONAL)
# ===============================================
CLOUDFLARE_TUNNEL_TOKEN=tu_cloudflare_tunnel_token

# ===============================================
# NOTAS DE CONFIGURACIÓN
# ===============================================
# 1. POSTGRES_PASSWORD: Debe coincidir con DB_PASSWORD en .env.local
# 2. N8N_ENCRYPTION_KEY: Generar con: openssl rand -hex 32
# 3. REDIS_PASSWORD: Generar password seguro para Redis
# 4. Estos valores deben mantenerse seguros y no subirse a Git

# ===============================================
# COMANDOS ÚTILES
# ===============================================
# Iniciar solo PostgreSQL:
# docker-compose -f docker-compose-fixed.yml up -d postgres

# Iniciar todos los servicios:
# docker-compose -f docker-compose-fixed.yml up -d

# Verificar servicios:
# docker ps

# Conectar a PostgreSQL:
# docker exec -it postgres_db psql -U postgres -d postgres

# Ver logs de PostgreSQL:
# docker logs postgres_db
